/* A Bison parser, made from CxxParser.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	ARROW	257
# define	ARROW_STAR	258
# define	DEC	259
# define	EQ	260
# define	GE	261
# define	INC	262
# define	LE	263
# define	LOG_AND	264
# define	LOG_OR	265
# define	NE	266
# define	SHL	267
# define	SHR	268
# define	ASS_ADD	269
# define	ASS_AND	270
# define	ASS_DIV	271
# define	ASS_MOD	272
# define	ASS_MUL	273
# define	ASS_OR	274
# define	ASS_SHL	275
# define	ASS_SHR	276
# define	ASS_SUB	277
# define	ASS_XOR	278
# define	DOT_STAR	279
# define	ELLIPSIS	280
# define	SCOPE	281
# define	PRIVATE	282
# define	PROTECTED	283
# define	PUBLIC	284
# define	BOOL	285
# define	CHAR	286
# define	DOUBLE	287
# define	FLOAT	288
# define	INT	289
# define	LONG	290
# define	SHORT	291
# define	SIGNED	292
# define	UNSIGNED	293
# define	VOID	294
# define	WCHAR_T	295
# define	MS_INT64	296
# define	MS_W64	297
# define	CLASS	298
# define	ENUM	299
# define	NAMESPACE	300
# define	STRUCT	301
# define	TYPENAME	302
# define	UNION	303
# define	CONST	304
# define	VOLATILE	305
# define	AUTO	306
# define	EXPLICIT	307
# define	EXPORT	308
# define	EXTERN	309
# define	FRIEND	310
# define	INLINE	311
# define	MUTABLE	312
# define	REGISTER	313
# define	STATIC	314
# define	TEMPLATE	315
# define	TYPEDEF	316
# define	USING	317
# define	VIRTUAL	318
# define	MS_INLINE1	319
# define	MS_INLINE	320
# define	MS_CDECL	321
# define	MS_STDCALL	322
# define	MS_FORCEINLINE	323
# define	MS_DECLSPEC	324
# define	MS_ASM	325
# define	ASM	326
# define	BREAK	327
# define	CASE	328
# define	CATCH	329
# define	CONST_CAST	330
# define	CONTINUE	331
# define	DEFAULT	332
# define	DELETE	333
# define	DO	334
# define	DYNAMIC_CAST	335
# define	ELSE	336
# define	FALSE	337
# define	FOR	338
# define	GOTO	339
# define	IF	340
# define	NEW	341
# define	OPERATOR	342
# define	REINTERPRET_CAST	343
# define	RETURN	344
# define	SIZEOF	345
# define	STATIC_CAST	346
# define	SWITCH	347
# define	THIS	348
# define	THROW	349
# define	TRUE	350
# define	TRY	351
# define	TYPEID	352
# define	WHILE	353
# define	CharacterLiteral	354
# define	FloatingLiteral	355
# define	Identifier	356
# define	IntegerLiteral	357
# define	NumberLiteral	358
# define	StringLiteral	359
# define	SHIFT_THERE	360
# define	REDUCE_HERE_MOSTLY	361

#line 19 "CxxParser.y"

#include <CxxParsing.hxx>
#ifndef YYDEBUG
# define YYDEBUG 1
#endif



#define	YYFINAL		907
#define	YYFLAG		-32768
#define	YYNTBASE	138

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 361 ? yytranslate[x] : 348)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    12,    26,   137,    29,     7,     9,    25,
      21,    22,     5,     3,    31,     4,    24,     6,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,    30,
      13,    15,    14,    23,    28,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    17,    27,    18,     8,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    19,    10,    20,    11,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,    12,    17,    21,    23,    25,
      27,    30,    33,    35,    38,    40,    43,    46,    49,    51,
      53,    56,    58,    61,    64,    66,    69,    71,    73,    75,
      77,    80,    85,    88,    91,    93,    96,    98,   101,   103,
     105,   107,   109,   111,   113,   115,   117,   119,   121,   123,
     125,   127,   129,   133,   136,   139,   143,   144,   146,   151,
     160,   168,   174,   179,   183,   187,   191,   195,   198,   201,
     209,   217,   225,   233,   236,   237,   239,   241,   245,   247,
     250,   253,   256,   260,   263,   266,   269,   272,   275,   277,
     280,   282,   285,   288,   292,   297,   300,   305,   308,   311,
     314,   317,   319,   323,   328,   329,   333,   335,   338,   340,
     344,   348,   350,   354,   358,   362,   364,   368,   372,   374,
     378,   382,   384,   388,   392,   396,   400,   402,   406,   410,
     412,   416,   418,   422,   424,   428,   430,   434,   436,   440,
     442,   448,   450,   454,   458,   460,   462,   464,   466,   468,
     470,   472,   474,   476,   478,   480,   482,   483,   485,   487,
     491,   493,   495,   499,   503,   507,   509,   513,   517,   519,
     523,   525,   529,   531,   535,   537,   541,   543,   547,   549,
     555,   557,   561,   563,   565,   569,   571,   575,   578,   580,
     584,   587,   589,   591,   593,   595,   597,   599,   601,   603,
     607,   612,   616,   620,   628,   629,   632,   639,   645,   653,
     659,   660,   662,   664,   670,   678,   687,   689,   692,   695,
     699,   703,   705,   710,   720,   721,   725,   733,   736,   738,
     742,   745,   747,   749,   751,   753,   755,   757,   759,   762,
     764,   766,   768,   770,   772,   774,   777,   779,   782,   785,
     788,   790,   793,   796,   798,   801,   803,   805,   808,   810,
     813,   815,   818,   820,   822,   825,   827,   830,   832,   835,
     839,   842,   844,   846,   848,   850,   852,   854,   856,   859,
     861,   863,   865,   867,   869,   871,   873,   875,   877,   879,
     881,   883,   885,   887,   889,   891,   893,   895,   897,   899,
     902,   904,   906,   908,   910,   912,   914,   916,   918,   920,
     922,   924,   926,   928,   930,   932,   934,   936,   939,   942,
     946,   949,   952,   956,   961,   963,   967,   969,   973,   974,
     978,   980,   984,   987,   989,   993,   995,   999,  1002,  1008,
    1012,  1017,  1022,  1028,  1032,  1036,  1040,  1044,  1046,  1048,
    1051,  1053,  1056,  1058,  1060,  1063,  1065,  1068,  1069,  1072,
    1073,  1076,  1078,  1080,  1083,  1086,  1087,  1090,  1092,  1093,
    1095,  1098,  1102,  1107,  1110,  1114,  1118,  1119,  1121,  1124,
    1126,  1130,  1132,  1136,  1138,  1141,  1145,  1147,  1151,  1153,
    1155,  1157,  1160,  1162,  1164,  1168,  1171,  1173,  1176,  1180,
    1182,  1184,  1187,  1190,  1193,  1196,  1199,  1202,  1204,  1208,
    1212,  1215,  1217,  1219,  1221,  1225,  1230,  1233,  1240,  1249,
    1251,  1255,  1258,  1260,  1264,  1267,  1269,  1272,  1277,  1283,
    1288,  1292,  1295,  1297,  1299,  1301,  1305,  1314,  1315,  1319,
    1327,  1330,  1332,  1336,  1339,  1341,  1343,  1345,  1347,  1349,
    1351,  1354,  1357,  1360,  1363,  1367,  1371,  1375,  1377,  1379,
    1382,  1386,  1389,  1391,  1397,  1399,  1403,  1405,  1409,  1411,
    1414,  1417,  1419,  1421,  1423,  1426,  1429,  1432,  1433,  1435,
    1438,  1443,  1445,  1448,  1451,  1456,  1461,  1463,  1466,  1468,
    1470,  1472,  1474,  1476,  1478,  1480,  1482,  1484,  1486,  1488,
    1490,  1492,  1494,  1496,  1498,  1500,  1502,  1504,  1506,  1508,
    1510,  1512,  1514,  1516,  1518,  1520,  1522,  1524,  1526,  1528,
    1530,  1532,  1534,  1536,  1538,  1540,  1542,  1545,  1548,  1551,
    1554,  1559,  1561,  1565,  1567,  1571,  1573,  1577,  1579,  1582,
    1584,  1586,  1589,  1593,  1599,  1602,  1604,  1608,  1610,  1615,
    1619,  1621,  1624,  1630,  1632,  1634,  1637,  1639,  1642,  1646,
    1651,  1653,  1657,  1659,  1660,  1661,  1662,  1663,  1664
};
static const short yyrhs[] =
{
     131,     0,   138,     0,   139,     0,   139,   141,     3,   330,
      14,     0,   139,   141,     3,    14,     0,   139,   141,     4,
       0,   329,     0,    13,     0,    56,     0,    90,   142,     0,
     140,    56,     0,   140,     0,   143,   144,     0,   144,     0,
     142,   144,     0,    11,   140,     0,    90,   146,     0,   313,
       0,   321,     0,    90,   147,     0,   147,     0,   143,   146,
       0,   143,   148,     0,   148,     0,   142,   148,     0,   145,
       0,   149,     0,   146,     0,   241,     0,   151,   241,     0,
     151,    56,    11,   151,     0,    11,   151,     0,    90,   152,
       0,   152,     0,   143,   153,     0,   153,     0,   142,   154,
       0,   134,     0,   132,     0,   129,     0,   130,     0,   155,
       0,   157,     0,   112,     0,   125,     0,   217,     0,   156,
       0,   123,     0,   231,     0,   160,     0,   272,     0,    17,
     188,    18,     0,    90,   272,     0,   275,    30,     0,   161,
     275,    30,     0,     0,   159,     0,   163,   272,   162,     4,
       0,   163,   272,   162,     3,   161,   343,    19,     1,     0,
     163,   272,   162,     3,   161,   343,     1,     0,   163,   272,
     162,     3,     1,     0,   163,    17,   188,    18,     0,   163,
      24,   150,     0,   163,    24,   154,     0,   163,    32,   150,
       0,   163,    32,   154,     0,   163,    37,     0,   163,    34,
       0,   110,    13,   268,    14,    21,   189,    22,     0,   121,
      13,   268,    14,    21,   189,    22,     0,   118,    13,   268,
      14,    21,   189,    22,     0,   105,    13,   268,    14,    21,
     189,    22,     0,   127,   273,     0,     0,   165,     0,   186,
       0,   165,    31,   186,     0,   163,     0,    37,   173,     0,
      34,   173,     0,   263,   173,     0,   232,   261,   173,     0,
       3,   173,     0,     4,   173,     0,    12,   173,     0,    11,
     173,     0,   120,   166,     0,   168,     0,   142,   168,     0,
     167,     0,   142,   167,     0,   108,   173,     0,   116,   169,
     172,     0,   116,   273,   169,   172,     0,   116,   273,     0,
     116,   273,   273,   172,     0,   238,   265,     0,   238,   170,
       0,   238,   169,     0,   263,   170,     0,   171,     0,    17,
     189,    18,     0,   171,    17,   190,    18,     0,     0,    21,
     164,    22,     0,   166,     0,   160,   173,     0,   173,     0,
     174,    54,   173,     0,   174,    33,   173,     0,   174,     0,
     175,   261,   174,     0,   175,     6,   174,     0,   175,     7,
     174,     0,   175,     0,   176,     3,   175,     0,   176,     4,
     175,     0,   176,     0,   177,    42,   176,     0,   177,    43,
     176,     0,   177,     0,   178,    13,   177,     0,   178,    14,
     177,     0,   178,    38,   177,     0,   178,    36,   177,     0,
     178,     0,   179,    35,   178,     0,   179,    41,   178,     0,
     179,     0,   180,     9,   179,     0,   180,     0,   181,     8,
     180,     0,   181,     0,   182,    10,   181,     0,   182,     0,
     183,    39,   182,     0,   183,     0,   184,    40,   183,     0,
     184,     0,   184,    23,   189,    16,   186,     0,   185,     0,
     184,   187,   186,     0,   184,    15,   290,     0,   337,     0,
      15,     0,    44,     0,    45,     0,    46,     0,    47,     0,
      48,     0,    49,     0,    50,     0,    51,     0,    52,     0,
      53,     0,     0,   189,     0,   186,     0,   165,    31,   186,
       0,   185,     0,   177,     0,   191,    13,   177,     0,   191,
      38,   177,     0,   191,    36,   177,     0,   191,     0,   192,
      35,   191,     0,   192,    41,   191,     0,   192,     0,   193,
       9,   192,     0,   193,     0,   194,     8,   193,     0,   194,
       0,   195,    10,   194,     0,   195,     0,   196,    39,   195,
       0,   196,     0,   197,    40,   196,     0,   197,     0,   197,
      23,   200,    16,   199,     0,   198,     0,   197,   187,   199,
       0,   338,     0,   199,     0,   201,    31,   199,     0,   199,
       0,   201,    31,   199,     0,   345,   203,     0,   204,     0,
     341,     3,   203,     0,   341,     4,     0,   205,     0,   207,
       0,   215,     0,   333,     0,   206,     0,   209,     0,   212,
       0,   214,     0,   138,    16,   202,     0,   103,   190,    16,
     202,     0,   107,    16,   202,     0,    19,   208,    20,     0,
      19,   208,   202,   137,   342,     1,    20,     0,     0,   208,
     202,     0,   208,   202,   137,   342,     1,    30,     0,   115,
      21,   211,    22,   202,     0,   115,    21,   211,    22,   202,
     111,   202,     0,   122,    21,   211,    22,   202,     0,     0,
     211,     0,   275,     0,   128,    21,   211,    22,   202,     0,
     109,   202,   128,    21,   189,    22,    30,     0,   113,    21,
     213,   210,    30,   188,    22,   202,     0,   224,     0,   102,
      30,     0,   106,    30,     0,   119,   188,    30,     0,   114,
     139,    30,     0,   222,     0,    19,   344,   217,    20,     0,
      19,   344,   217,   347,   218,   137,   342,     1,    20,     0,
       0,   217,   347,   218,     0,   217,   347,   218,   137,   342,
       1,    30,     0,   346,   219,     0,   220,     0,   341,     3,
     219,     0,   341,     4,     0,   222,     0,   282,     0,   323,
       0,   332,     0,   221,     0,   258,     0,   253,     0,    90,
     221,     0,   224,     0,   223,     0,   257,     0,   254,     0,
     255,     0,   256,     0,    90,   223,     0,    30,     0,   260,
      30,     0,   259,    30,     0,   235,   224,     0,   241,     0,
     225,   241,     0,   225,   234,     0,   225,     0,    90,   226,
       0,   145,     0,   239,     0,   227,   234,     0,   227,     0,
     227,   225,     0,   228,     0,   229,   228,     0,   149,     0,
     229,     0,   229,   149,     0,   226,     0,   226,   230,     0,
     230,     0,   229,    56,     0,   226,   229,    56,     0,   226,
      56,     0,   236,     0,   237,     0,    85,     0,    91,     0,
     267,     0,   233,     0,   233,     0,    90,   235,     0,    88,
       0,    89,     0,    87,     0,    84,     0,    81,     0,    82,
       0,    86,     0,    93,     0,    96,     0,    98,     0,    95,
       0,    94,     0,    97,     0,    99,     0,   240,     0,   239,
       0,   267,     0,   298,     0,   244,     0,   242,     0,    90,
     239,     0,   145,     0,   241,     0,    61,     0,    70,     0,
      60,     0,    66,     0,    64,     0,    65,     0,    67,     0,
      68,     0,    63,     0,    62,     0,    69,     0,    71,     0,
      72,     0,   295,     0,   243,     0,    77,   145,     0,    74,
     145,     0,    74,   145,   245,     0,    74,   245,     0,    19,
     246,     0,    19,   250,   246,     0,    19,   250,    31,   247,
       0,    20,     0,   342,     1,    20,     0,    20,     0,   342,
       1,    20,     0,     0,   342,     1,    31,     0,   248,     0,
     250,    31,   248,     0,   249,   251,     0,   252,     0,   252,
      15,   190,     0,   139,     0,    75,   145,   216,     0,    75,
     216,     0,    75,   145,    15,   145,    30,     0,    92,   150,
      30,     0,    92,    77,   150,    30,     0,    92,    75,   145,
      30,     0,   101,    21,   155,    22,    30,     0,    84,   155,
     218,     0,    84,   155,   216,     0,   186,    31,   260,     0,
     259,    31,   260,     0,   186,     0,     5,     0,   261,   267,
       0,   261,     0,   143,   262,     0,     9,     0,   262,     0,
     142,   262,     0,   263,     0,   263,   264,     0,     0,   263,
     265,     0,     0,   266,   267,     0,    79,     0,    80,     0,
     238,   269,     0,   238,   268,     0,     0,   263,   269,     0,
     271,     0,     0,   271,     0,   270,   272,     0,   270,    17,
      18,     0,   270,    17,   190,    18,     0,   273,   266,     0,
     273,   266,   339,     0,    21,   274,    22,     0,     0,   275,
       0,   275,    55,     0,   279,     0,   275,    31,   279,     0,
     264,     0,   175,   261,   265,     0,   276,     0,   180,     9,
       0,   180,     9,   276,     0,   277,     0,   277,    15,   186,
       0,    55,     0,   186,     0,   278,     0,   235,   279,     0,
     199,     0,   281,     0,   281,    15,   199,     0,   235,   280,
       0,   276,     0,   193,     9,     0,   193,     9,   276,     0,
     284,     0,   283,     0,   186,   286,     0,   186,   288,     0,
     235,   283,     0,   285,   286,     0,   285,   288,     0,   235,
     284,     0,   309,     0,   285,    31,   186,     0,   126,   287,
     334,     0,   315,   288,     0,   207,     0,   186,     0,   290,
       0,    19,   291,    20,     0,    19,   291,    31,    20,     0,
      19,    20,     0,    19,   292,   137,   342,     1,    20,     0,
      19,   291,    31,   292,   137,   342,     1,    20,     0,   292,
       0,   291,    31,   292,     0,   345,   293,     0,   289,     0,
     341,     3,   293,     0,   341,     4,     0,    16,     0,   297,
     145,     0,   297,   145,   294,     1,     0,   297,   145,   294,
     310,    19,     0,   297,    16,   310,    19,     0,   297,   145,
      19,     0,   297,    19,     0,    73,     0,    76,     0,    78,
       0,   296,   299,    20,     0,   296,   299,   347,   300,   137,
     342,     1,    20,     0,     0,   299,   347,   300,     0,   299,
     347,   300,   137,   342,     1,    30,     0,   345,   301,     0,
     302,     0,   341,     3,   301,     0,   341,     4,     0,   306,
       0,   303,     0,   282,     0,   255,     0,   323,     0,    30,
       0,   186,    30,     0,   285,    30,     0,   304,    30,     0,
     235,   303,     0,   186,    31,   305,     0,   285,    31,   309,
       0,   304,    31,   305,     0,   186,     0,   309,     0,   312,
      16,     0,   186,    16,   308,     0,    16,   308,     0,   184,
       0,   184,    23,   308,    16,   308,     0,   307,     0,   307,
      15,   289,     0,   311,     0,   310,    31,   311,     0,   145,
       0,   312,   311,     0,    93,   311,     0,    57,     0,    58,
       0,    59,     0,   117,   314,     0,   238,   265,     0,   238,
     314,     0,     0,   316,     0,    16,   317,     0,    16,   317,
     342,     1,     0,   319,     0,   318,   319,     0,   317,    31,
       0,   317,   342,     1,    31,     0,   320,    21,   164,    22,
       0,   145,     0,   117,   322,     0,   116,     0,   108,     0,
       3,     0,     4,     0,     5,     0,     6,     0,     7,     0,
       8,     0,     9,     0,    10,     0,    11,     0,    12,     0,
      15,     0,    13,     0,    14,     0,    44,     0,    52,     0,
      48,     0,    46,     0,    47,     0,    53,     0,    45,     0,
      49,     0,    42,     0,    43,     0,    51,     0,    50,     0,
      35,     0,    41,     0,    38,     0,    36,     0,    39,     0,
      40,     0,    37,     0,    34,     0,    31,     0,    33,     0,
      32,     0,    21,    22,     0,    17,    18,     0,   324,   220,
       0,    83,   323,     0,    90,    13,   325,    14,     0,   326,
       0,   325,    31,   326,     0,   327,     0,   327,    15,   268,
       0,   328,     0,   328,    15,   139,     0,   280,     0,   342,
       1,     0,    73,     0,    77,     0,   324,    73,     0,   324,
      73,   139,     0,    90,   139,    13,   330,    14,     0,    90,
     329,     0,   331,     0,   330,    31,   331,     0,   280,     0,
      90,    13,    14,   220,     0,   126,   207,   334,     0,   335,
       0,   335,   334,     0,   104,    21,   336,    22,   207,     0,
     279,     0,   124,     0,   124,   186,     0,   124,     0,   124,
     199,     0,   124,    21,    22,     0,   124,    21,   340,    22,
       0,   268,     0,   340,    31,   268,     0,     1,     0,     0,
       0,     0,     0,     0,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   306,   307,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   328,   329,   330,   331,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   350,   351,   352,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   378,   381,
     382,   383,   384,   385,   386,   387,   392,   424,   425,   426,
     430,   436,   437,   438,   445,   446,   447,   448,   450,   451,
     453,   455,   457,   461,   463,   464,   466,   467,   468,   469,
     470,   471,   472,   473,   476,   477,   478,   479,   481,   482,
     483,   484,   489,   491,   492,   493,   494,   495,   497,   498,
     499,   500,   504,   506,   507,   508,   510,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   527,   528,   531,   532,
     533,   534,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   569,   570,   571,   572,   573,   573,   573,   573,   573,
     573,   573,   573,   573,   573,   573,   578,   579,   580,   581,
     582,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   598,   599,   601,   602,   604,   605,   607,   608,
     610,   611,   613,   614,   615,   617,   618,   625,   626,   627,
     628,   629,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   642,   643,   644,   645,   646,   650,   651,   652,
     653,   654,   655,   658,   659,   660,   662,   664,   665,   666,
     667,   668,   673,   674,   676,   677,   678,   679,   680,   681,
     682,   683,   684,   685,   687,   688,   689,   690,   691,   692,
     693,   694,   695,   696,   697,   698,   699,   700,   701,   702,
     717,   718,   719,   720,   721,   722,   723,   724,   725,   726,
     727,   728,   729,   730,   731,   732,   733,   734,   735,   736,
     737,   739,   740,   741,   742,   743,   745,   747,   748,   750,
     750,   750,   751,   752,   754,   755,   756,   757,   758,   759,
     760,   761,   762,   765,   766,   767,   769,   770,   771,   772,
     773,   774,   775,   775,   775,   775,   775,   775,   775,   775,
     775,   775,   775,   775,   775,   786,   787,   788,   790,   791,
     792,   793,   794,   795,   796,   797,   798,   799,   800,   801,
     802,   803,   804,   805,   806,   807,   809,   810,   811,   813,
     814,   816,   817,   818,   819,   825,   826,   827,   834,   835,
     836,   837,   838,   839,   840,   841,   842,   844,   845,   847,
     848,   849,   849,   852,   853,   856,   857,   858,   859,   860,
     861,   862,   863,   866,   867,   868,   870,   871,   872,   873,
     874,   881,   882,   883,   884,   885,   886,   887,   888,   889,
     890,   891,   895,   896,   897,   899,   900,   901,   902,   908,
     909,   910,   911,   912,   913,   914,   915,   916,   917,   918,
     919,   920,   927,   928,   929,   930,   931,   932,   933,   935,
     936,   937,   938,   939,   940,   955,   956,   957,   958,   959,
     960,   961,   962,   962,   962,   963,   964,   966,   967,   968,
     970,   971,   972,   973,   974,   975,   976,   979,   980,   987,
     988,   989,   990,   991,   992,   993,   994,   995,   998,   999,
    1000,  1001,  1002,  1004,  1005,  1006,  1012,  1013,  1014,  1015,
    1016,  1017,  1017,  1017,  1022,  1023,  1024,  1032,  1033,  1034,
    1035,  1036,  1037,  1038,  1039,  1040,  1041,  1046,  1056,  1057,
    1062,  1063,  1064,  1065,  1066,  1067,  1068,  1069,  1070,  1071,
    1072,  1073,  1074,  1075,  1076,  1077,  1078,  1079,  1080,  1081,
    1082,  1083,  1084,  1085,  1086,  1087,  1088,  1089,  1090,  1091,
    1092,  1093,  1094,  1095,  1096,  1097,  1098,  1099,  1104,  1105,
    1106,  1107,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,
    1117,  1119,  1120,  1121,  1122,  1126,  1127,  1128,  1138,  1143,
    1145,  1146,  1147,  1148,  1150,  1151,  1152,  1153,  1154,  1155,
    1156,  1157,  1162,  1163,  1164,  1165,  1166,  1167,  1168
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
  "'&'", "'|'", "'~'", "'!'", "'<'", "'>'", "'='", "':'", "'['", "']'", 
  "'{'", "'}'", "'('", "')'", "'?'", "'.'", "'\\''", "'\\\"'", "'\\\\'", 
  "'@'", "'$'", "';'", "','", "ARROW", "ARROW_STAR", "DEC", "EQ", "GE", 
  "INC", "LE", "LOG_AND", "LOG_OR", "NE", "SHL", "SHR", "ASS_ADD", 
  "ASS_AND", "ASS_DIV", "ASS_MOD", "ASS_MUL", "ASS_OR", "ASS_SHL", 
  "ASS_SHR", "ASS_SUB", "ASS_XOR", "DOT_STAR", "ELLIPSIS", "SCOPE", 
  "PRIVATE", "PROTECTED", "PUBLIC", "BOOL", "CHAR", "DOUBLE", "FLOAT", 
  "INT", "LONG", "SHORT", "SIGNED", "UNSIGNED", "VOID", "WCHAR_T", 
  "MS_INT64", "MS_W64", "CLASS", "ENUM", "NAMESPACE", "STRUCT", 
  "TYPENAME", "UNION", "CONST", "VOLATILE", "AUTO", "EXPLICIT", "EXPORT", 
  "EXTERN", "FRIEND", "INLINE", "MUTABLE", "REGISTER", "STATIC", 
  "TEMPLATE", "TYPEDEF", "USING", "VIRTUAL", "MS_INLINE1", "MS_INLINE", 
  "MS_CDECL", "MS_STDCALL", "MS_FORCEINLINE", "MS_DECLSPEC", "MS_ASM", 
  "ASM", "BREAK", "CASE", "CATCH", "CONST_CAST", "CONTINUE", "DEFAULT", 
  "DELETE", "DO", "DYNAMIC_CAST", "ELSE", "FALSE", "FOR", "GOTO", "IF", 
  "NEW", "OPERATOR", "REINTERPRET_CAST", "RETURN", "SIZEOF", 
  "STATIC_CAST", "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEID", 
  "WHILE", "CharacterLiteral", "FloatingLiteral", "Identifier", 
  "IntegerLiteral", "NumberLiteral", "StringLiteral", "SHIFT_THERE", 
  "REDUCE_HERE_MOSTLY", "'#'", "identifier_word", "identifier", "id", 
  "template_test", "global_scope", "id_scope", "nested_id", "scoped_id", 
  "destructor_id", "special_function_id", "nested_special_function_id", 
  "scoped_special_function_id", "declarator_id", "built_in_type_id", 
  "pseudo_destructor_id", "nested_pseudo_destructor_id", 
  "scoped_pseudo_destructor_id", "string", "literal", "boolean_literal", 
  "translation_unit", "primary_expression", "abstract_expression", 
  "type1_parameters", "mark_type1", "postfix_expression", 
  "expression_list.opt", "expression_list", "unary_expression", 
  "delete_expression", "new_expression", "new_type_id", "new_declarator", 
  "direct_new_declarator", "new_initializer.opt", "cast_expression", 
  "pm_expression", "multiplicative_expression", "additive_expression", 
  "shift_expression", "relational_expression", "equality_expression", 
  "and_expression", "exclusive_or_expression", "inclusive_or_expression", 
  "logical_and_expression", "logical_or_expression", 
  "conditional_expression", "assignment_expression", 
  "assignment_operator", "expression.opt", "expression", 
  "constant_expression", "templated_relational_expression", 
  "templated_equality_expression", "templated_and_expression", 
  "templated_exclusive_or_expression", 
  "templated_inclusive_or_expression", "templated_logical_and_expression", 
  "templated_logical_or_expression", "templated_conditional_expression", 
  "templated_assignment_expression", "templated_expression", 
  "templated_expression_list", "looping_statement", "looped_statement", 
  "statement", "control_statement", "labeled_statement", 
  "compound_statement", "statement_seq.opt", "selection_statement", 
  "condition.opt", "condition", "iteration_statement", 
  "for_init_statement", "jump_statement", "declaration_statement", 
  "compound_declaration", "declaration_seq.opt", "looping_declaration", 
  "looped_declaration", "declaration", "specialised_declaration", 
  "block_declaration", "specialised_block_declaration", 
  "simple_declaration", "suffix_built_in_decl_specifier.raw", 
  "suffix_built_in_decl_specifier", "suffix_named_decl_specifier", 
  "suffix_named_decl_specifier.bi", "suffix_named_decl_specifiers", 
  "suffix_named_decl_specifiers.sf", "suffix_decl_specified_ids", 
  "suffix_decl_specified_scope", "decl_specifier_affix", 
  "decl_specifier_suffix", "decl_specifier_prefix", 
  "storage_class_specifier", "function_specifier", "type_specifier", 
  "elaborate_type_specifier", "simple_type_specifier", 
  "built_in_type_specifier", "elaborated_type_specifier", 
  "elaborated_enum_specifier", "enum_specifier", "enumerator_clause", 
  "enumerator_list_ecarb", "enumerator_definition_ecarb", 
  "enumerator_definition_filler", "enumerator_list_head", 
  "enumerator_list", "enumerator_definition", "enumerator", 
  "namespace_definition", "namespace_alias_definition", 
  "using_declaration", "using_directive", "asm_definition", 
  "linkage_specification", "init_declarations", "init_declaration", 
  "star_ptr_operator", "nested_ptr_operator", "ptr_operator", 
  "ptr_operator_seq", "ptr_operator_seq.opt", "cv_qualifier_seq.opt", 
  "cv_qualifier", "type_id", "abstract_declarator.opt", 
  "direct_abstract_declarator.opt", "direct_abstract_declarator", 
  "parenthesis_clause", "parameters_clause", 
  "parameter_declaration_clause", "parameter_declaration_list", 
  "abstract_pointer_declaration", "abstract_parameter_declaration", 
  "special_parameter_declaration", "parameter_declaration", 
  "templated_parameter_declaration", "templated_abstract_declaration", 
  "function_definition", "func_definition", "ctor_definition", 
  "constructor_head", "function_try_block", "function_block", 
  "function_body", "initializer_clause", "braced_initializer", 
  "initializer_list", "looping_initializer_clause", 
  "looped_initializer_clause", "colon_mark", "elaborated_class_specifier", 
  "class_specifier_head", "class_key", "class_specifier", 
  "member_specification.opt", "looping_member_declaration", 
  "looped_member_declaration", "member_declaration", 
  "simple_member_declaration", "member_init_declarations", 
  "member_init_declaration", "accessibility_specifier", 
  "bit_field_declaration", "bit_field_width", 
  "bit_field_init_declaration", "base_specifier_list", "base_specifier", 
  "access_specifier", "conversion_function_id", "conversion_type_id", 
  "ctor_initializer.opt", "ctor_initializer", "mem_initializer_list", 
  "mem_initializer_list_head", "mem_initializer", "mem_initializer_id", 
  "operator_function_id", "operator", "template_declaration", 
  "template_parameter_clause", "template_parameter_list", 
  "template_parameter", "simple_type_parameter", 
  "templated_type_parameter", "template_id", "template_argument_list", 
  "template_argument", "explicit_specialization", "try_block", 
  "handler_seq", "handler", "exception_declaration", "throw_expression", 
  "templated_throw_expression", "exception_specification", "type_id_list", 
  "advance_search", "bang", "mark", "nest", "start_search", 
  "start_search1", "util", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   138,   139,   140,   140,   140,   140,   140,   141,   142,
     142,   143,   144,   144,   145,   145,   146,   146,   147,   147,
     147,   148,   148,   148,   149,   149,   150,   150,   150,   151,
     151,   152,   152,   152,   153,   153,   154,   154,   155,   156,
     156,   156,   156,   156,   157,   157,   158,   159,   159,   159,
     159,   160,   160,   160,   161,   161,   162,   163,   163,   163,
     163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
     163,   163,   163,   163,   164,   164,   165,   165,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   167,   168,   168,   168,   168,   169,   169,   169,
     170,   170,   171,   171,   172,   172,   173,   173,   174,   174,
     174,   175,   175,   175,   175,   176,   176,   176,   177,   177,
     177,   178,   178,   178,   178,   178,   179,   179,   179,   180,
     180,   181,   181,   182,   182,   183,   183,   184,   184,   185,
     185,   186,   186,   186,   186,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   188,   188,   189,   189,
     190,   191,   191,   191,   191,   192,   192,   192,   193,   193,
     194,   194,   195,   195,   196,   196,   197,   197,   198,   198,
     199,   199,   199,   200,   200,   201,   201,   202,   203,   203,
     203,   204,   204,   204,   204,   205,   205,   205,   205,   206,
     206,   206,   207,   207,   208,   208,   208,   209,   209,   209,
     210,   210,   211,   212,   212,   212,   213,   214,   214,   214,
     214,   215,   216,   216,   217,   217,   217,   218,   219,   219,
     219,   220,   220,   220,   220,   220,   221,   221,   221,   222,
     222,   223,   223,   223,   223,   223,   224,   224,   224,   224,
     225,   225,   225,   226,   226,   227,   227,   227,   228,   228,
     229,   229,   230,   230,   230,   231,   231,   231,   232,   232,
     232,   233,   233,   233,   233,   233,   234,   235,   235,   236,
     236,   236,   236,   236,   237,   237,   237,   237,   237,   237,
     237,   237,   237,   238,   238,   238,   239,   239,   239,   239,
     240,   240,   241,   241,   241,   241,   241,   241,   241,   241,
     241,   241,   241,   241,   241,   242,   242,   242,   243,   244,
     244,   245,   245,   245,   246,   246,   247,   247,   248,   248,
     249,   249,   250,   251,   251,   252,   253,   253,   254,   255,
     255,   256,   257,   258,   258,   259,   259,   260,   261,   261,
     262,   262,   263,   263,   263,   264,   264,   265,   265,   266,
     266,   267,   267,   268,   268,   269,   269,   269,   270,   270,
     271,   271,   271,   272,   272,   273,   274,   274,   274,   275,
     275,   276,   276,   277,   277,   277,   278,   278,   278,   279,
     279,   279,   280,   280,   280,   280,   281,   281,   281,   282,
     282,   283,   283,   283,   284,   284,   284,   285,   285,   286,
     287,   288,   289,   289,   290,   290,   290,   290,   290,   291,
     291,   292,   293,   293,   293,   294,   295,   295,   296,   296,
     296,   296,   297,   297,   297,   298,   298,   299,   299,   299,
     300,   301,   301,   301,   302,   302,   302,   302,   302,   303,
     303,   303,   303,   303,   304,   304,   304,   305,   305,   306,
     307,   307,   308,   308,   309,   309,   310,   310,   311,   311,
     311,   312,   312,   312,   313,   314,   314,   315,   315,   316,
     316,   317,   317,   318,   318,   319,   320,   321,   322,   322,
     322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
     322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
     322,   322,   322,   322,   322,   322,   322,   322,   322,   322,
     322,   322,   322,   322,   322,   322,   322,   322,   323,   323,
     324,   325,   325,   326,   326,   326,   326,   326,   326,   327,
     327,   328,   328,   329,   329,   330,   330,   331,   332,   333,
     334,   334,   335,   336,   337,   337,   338,   338,   339,   339,
     340,   340,   341,   342,   343,   344,   345,   346,   347
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     5,     4,     3,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     2,     2,     1,     1,
       2,     1,     2,     2,     1,     2,     1,     1,     1,     1,
       2,     4,     2,     2,     1,     2,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     2,     3,     0,     1,     4,     8,
       7,     5,     4,     3,     3,     3,     3,     2,     2,     7,
       7,     7,     7,     2,     0,     1,     1,     3,     1,     2,
       2,     2,     3,     2,     2,     2,     2,     2,     1,     2,
       1,     2,     2,     3,     4,     2,     4,     2,     2,     2,
       2,     1,     3,     4,     0,     3,     1,     2,     1,     3,
       3,     1,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       5,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     3,
       1,     1,     3,     3,     3,     1,     3,     3,     1,     3,
       1,     3,     1,     3,     1,     3,     1,     3,     1,     5,
       1,     3,     1,     1,     3,     1,     3,     2,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       4,     3,     3,     7,     0,     2,     6,     5,     7,     5,
       0,     1,     1,     5,     7,     8,     1,     2,     2,     3,
       3,     1,     4,     9,     0,     3,     7,     2,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     2,     1,     2,     2,     2,
       1,     2,     2,     1,     2,     1,     1,     2,     1,     2,
       1,     2,     1,     1,     2,     1,     2,     1,     2,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     3,
       2,     2,     3,     4,     1,     3,     1,     3,     0,     3,
       1,     3,     2,     1,     3,     1,     3,     2,     5,     3,
       4,     4,     5,     3,     3,     3,     3,     1,     1,     2,
       1,     2,     1,     1,     2,     1,     2,     0,     2,     0,
       2,     1,     1,     2,     2,     0,     2,     1,     0,     1,
       2,     3,     4,     2,     3,     3,     0,     1,     2,     1,
       3,     1,     3,     1,     2,     3,     1,     3,     1,     1,
       1,     2,     1,     1,     3,     2,     1,     2,     3,     1,
       1,     2,     2,     2,     2,     2,     2,     1,     3,     3,
       2,     1,     1,     1,     3,     4,     2,     6,     8,     1,
       3,     2,     1,     3,     2,     1,     2,     4,     5,     4,
       3,     2,     1,     1,     1,     3,     8,     0,     3,     7,
       2,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     3,     3,     3,     1,     1,     2,
       3,     2,     1,     5,     1,     3,     1,     3,     1,     2,
       2,     1,     1,     1,     2,     2,     2,     0,     1,     2,
       4,     1,     2,     2,     4,     4,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       4,     1,     3,     1,     3,     1,     3,     1,     2,     1,
       1,     2,     3,     5,     2,     1,     3,     1,     4,     3,
       1,     2,     5,     1,     1,     2,     1,     2,     3,     4,
       1,     3,     1,     0,     0,     0,     0,     0,     0
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
     224,   568,   567,   225,     0,   563,   562,     0,     0,   348,
     352,     0,     0,     0,   156,   376,   246,     0,     0,     9,
     304,   302,   311,   310,   306,   307,   305,   308,   309,   312,
     303,   313,   314,   432,     0,     0,   433,     0,   434,   361,
     362,   283,   284,     0,   282,   273,   285,   281,   279,   280,
       0,   274,     0,   286,   290,   289,   287,   291,   288,   292,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
      48,   554,    45,     0,    40,    41,     1,    39,    38,     2,
       3,    12,     0,     0,    14,   255,    21,    24,   262,    42,
      47,    43,    57,    50,    78,   106,    90,    88,   108,   111,
     115,   118,   121,   126,   129,   131,   133,   135,   137,   139,
     141,   347,   227,   228,   235,   231,   240,   239,   253,   265,
     258,   260,   263,   267,    49,     0,   277,     0,   271,   272,
     256,   250,   298,   316,   297,   237,   242,   243,   244,   241,
     236,     0,     0,   350,   353,     0,   275,    51,   359,   232,
     400,   399,     0,   315,   437,     0,   296,   464,   407,    18,
      19,   233,     0,     7,   234,   144,     0,     0,     0,    83,
      84,    86,    85,   462,   461,     0,   158,     0,   157,   388,
     282,     0,   115,   131,   389,     0,   355,   381,     0,   377,
     383,   386,   390,   379,    80,    79,   328,     0,     0,     0,
     318,   320,   565,     0,   337,   317,     0,   529,   567,   563,
       0,     0,    10,    20,   238,   245,   254,   278,   299,    53,
     544,     0,     0,     0,     0,     0,     0,    26,    28,    27,
       0,     0,     0,    92,     0,     0,   300,   104,   357,   294,
     293,   301,   295,    95,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   501,   502,   500,     0,     0,   523,
     525,   524,   522,   515,   518,   521,   517,   519,   520,   516,
     511,   512,   503,   509,   506,   507,   505,   510,   514,   513,
     504,   508,   489,   488,   357,   474,   487,     0,    50,    87,
       0,   555,    73,     8,     0,    11,     0,    15,    25,    91,
      89,   354,     0,    13,    22,    23,   351,   107,   156,     0,
       0,    68,    67,    56,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   145,     0,     0,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,     0,     0,   204,     0,
     477,   411,   401,   402,   276,   252,   251,     9,     0,   263,
     266,   259,   257,     9,   264,   261,     0,   249,   403,   406,
     248,     0,   247,   349,    81,   373,     0,   404,   405,   568,
       0,   431,   426,     0,   528,     0,   230,     0,     0,     0,
       0,    52,     0,   357,   384,   391,   356,   375,     0,   378,
       0,   324,   321,   330,     0,   563,     0,     0,   319,   224,
       0,   336,   563,   344,   343,     0,   432,   540,     0,   556,
     161,   165,   168,   170,   172,   174,   176,   178,   180,   392,
       0,   396,   537,   393,     0,     0,   531,   533,   535,   182,
       0,     0,    16,     0,     0,    17,   339,     0,   365,     0,
       0,    74,    93,     0,     0,     0,    99,    98,   101,   357,
      97,   104,   104,   527,   526,   357,   475,   476,     0,     0,
       0,     6,     0,     0,     0,     0,     0,    63,     0,    34,
      36,    64,    29,    65,    66,     0,   110,   109,   113,   114,
     112,   116,   117,   119,   120,   122,   123,   125,   124,   127,
     128,   130,   132,   134,   136,   566,   143,     0,   138,   142,
     460,   566,   347,   345,     0,     0,     0,   478,     9,    82,
     346,     0,   360,   374,   408,   435,   566,   471,   472,   473,
       0,   468,     0,   466,     0,   425,   430,     0,   412,   465,
     413,   229,   226,     0,   159,   357,   382,   385,   380,   387,
     335,   332,   333,   328,   322,     0,     0,   568,     0,   548,
     170,   557,     0,     0,     0,     0,     0,   397,     0,     0,
       0,   145,     0,     0,     0,   395,     0,   541,   530,   563,
       0,     0,   538,   547,     0,   545,   341,   340,     0,   365,
     364,   363,     0,   367,     0,     0,     0,    75,    76,     0,
       0,     0,     0,     0,   100,   358,    94,    96,     0,     0,
       5,     0,    62,    32,    33,     0,     0,     0,    37,     0,
      35,     0,    30,     0,    58,   416,     0,   419,     0,     0,
     202,   205,     0,   486,   479,     0,   481,     0,     0,   409,
     550,   410,     0,   438,     0,   470,   429,     0,   469,   427,
       0,     0,     0,   326,   323,   331,     0,     0,   325,   329,
     222,   567,   338,     0,   162,   164,   163,   166,   167,   169,
     398,   171,   173,   175,   183,     0,     0,   177,   181,   394,
     542,   532,   534,   536,   543,     0,   342,   366,     0,   370,
       0,     0,   105,     0,   102,   139,   160,     0,     0,     0,
       4,     0,     0,     0,    61,   564,     0,   414,   566,   563,
     422,   421,     0,   140,   563,     0,     0,     0,     0,     0,
       0,   566,     0,     0,     0,   156,     0,     0,     0,     2,
     347,   187,   188,   191,   195,   192,   196,   197,   198,   193,
     221,     0,   194,     0,   483,     0,   482,    74,     0,   551,
     558,   560,     0,   563,   449,     0,     0,     0,   447,   446,
       0,   440,   441,   445,     0,   444,     0,   448,     0,   467,
     428,   463,   334,     0,   225,     0,     0,   546,   371,     0,
       0,     0,    77,   103,     0,     0,     0,    31,     0,     0,
      54,   415,   420,     0,     0,   424,     0,     0,     0,   217,
       0,   218,   566,     0,     0,     0,     0,     0,     0,     0,
       0,   566,     0,   190,   480,     0,   553,     0,   559,     0,
       0,   450,     0,   453,   451,     0,   452,     0,   459,     0,
     443,   327,   563,   179,   184,   372,    72,    69,    71,    70,
      55,    60,     0,   563,     0,   423,     0,   566,   201,     0,
     210,   216,   220,     0,   212,   219,     0,   549,     0,   199,
     189,   484,   485,     0,   561,     0,   457,   454,   458,   408,
     455,   456,   442,     0,    59,     0,   417,   203,   206,   200,
       0,     0,   211,   566,   566,   566,   552,   436,   439,     0,
       0,     0,   156,   207,   209,   213,   223,   418,     0,     0,
     566,   214,   566,   208,   215,     0,     0,     0
};

static const short yydefgoto[] =
{
      79,    80,    81,   294,    82,    83,    84,    85,   228,    86,
      87,    88,   230,   478,   479,   480,   618,    89,    90,    91,
     905,    92,    93,   705,   485,    94,   596,   175,    95,    96,
      97,   237,   457,   458,   452,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   176,   346,
     177,   178,   697,   421,   422,   560,   424,   425,   426,   427,
     428,   429,   675,   676,   631,   731,   732,   733,   734,   351,
     511,   736,   881,   853,   737,   850,   738,   739,   204,     1,
       3,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   355,   185,   128,   129,
     448,   130,   240,   131,   132,   133,   134,   201,   402,   654,
     403,   404,   405,   551,   552,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   187,   605,   375,   146,
     449,   591,   592,   593,   147,   148,   188,   854,   190,   191,
     192,   193,   432,   433,   149,   150,   151,   152,   352,   515,
     353,   710,   540,   626,   627,   711,   537,   153,   154,   155,
     156,   379,   643,   761,   762,   763,   764,   867,   765,   157,
     174,   158,   532,   533,   534,   159,   285,   516,   517,   634,
     635,   636,   637,   160,   286,   161,   162,   435,   436,   437,
     438,   163,   584,   585,   164,   742,   639,   640,   817,   165,
     439,   523,   752,   166,   440,   789,   409,   632,     4,     2
};

static const short yypact[] =
{
  -32768,   101,-32768,    13,  1982,-32768,-32768,  4028,  4028,-32768,
  -32768,  4028,  4028,  4028,  3797,  2719,-32768,  4028,  4028,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,    72,   369,-32768,    73,-32768,-32768,
  -32768,-32768,-32768,   290,     6,-32768,-32768,-32768,-32768,-32768,
    4347,-32768,   422,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     144,   240,  4028,   248,-32768,  4193,  4160,   303,  4028,   334,
  -32768,  3797,-32768,   281,-32768,-32768,-32768,-32768,-32768,-32768,
     379,   279,    51,   149,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  4267,   300,-32768,-32768,-32768,-32768,    97,
     582,   488,   459,   428,   405,   386,   398,   418,   392,   611,
  -32768,    83,-32768,-32768,-32768,-32768,-32768,-32768,  5007,   894,
    5007,-32768,  1043,-32768,-32768,   403,-32768,  2455,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   493,   419,   476,-32768,  4028,-32768,-32768,-32768,-32768,
  -32768,-32768,   126,-32768,-32768,   522,-32768,   442,-32768,-32768,
  -32768,-32768,  2323,-32768,-32768,-32768,   558,   464,  4671,-32768,
  -32768,-32768,-32768,   168,-32768,   444,   454,   471,-32768,-32768,
  -32768,  4592,   582,   487,-32768,  2719,  4028,-32768,   504,    87,
  -32768,   483,-32768,-32768,-32768,-32768,   198,    73,    -7,    -7,
     491,-32768,-32768,   356,-32768,-32768,   515,-32768,   516,  2851,
    4750,   529,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    -7,    73,    81,    81,    21,   202,-32768,-32768,-32768,
     514,     6,  4966,-32768,  4966,   794,-32768,   528,  1577,-32768,
  -32768,-32768,-32768,  4193,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   561,   560,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  4236,-32768,-32768,  4966,-32768,-32768,
    4966,-32768,-32768,-32768,   563,-32768,    21,-32768,-32768,-32768,
  -32768,-32768,   202,-32768,-32768,-32768,-32768,-32768,  3797,   979,
     979,-32768,-32768,-32768,  4028,  4028,  4028,  4028,  3511,  4028,
    4028,  4028,  4028,  4028,  4028,  4028,  4028,  4028,  4028,  4028,
    4028,  4028,  4028,   577,  3797,  4028,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  3797,  4028,-32768,  3797,
     590,-32768,-32768,-32768,-32768,-32768,-32768,   593,  1052,  1169,
  -32768,  5007,-32768,   603,-32768,-32768,  3511,-32768,-32768,-32768,
  -32768,  3797,-32768,-32768,-32768,    15,  3797,-32768,-32768,   612,
     461,-32768,   343,  3643,-32768,  1982,-32768,   605,  1628,  4028,
    3797,-32768,  4894,  3511,  4028,-32768,-32768,-32768,  2719,-32768,
    3797,-32768,-32768,-32768,   490,   266,   622,    -7,-32768,-32768,
      73,-32768,  3247,-32768,-32768,  2323,   243,    73,  4434,  3874,
     459,   269,   453,   634,   637,   658,   638,  1013,-32768,-32768,
    3379,-32768,-32768,   668,   615,    84,-32768,   682,   684,-32768,
     693,  3379,-32768,   672,   673,-32768,-32768,   683,  1537,   695,
     699,  3797,-32768,  3797,    58,    58,-32768,-32768,   697,   554,
  -32768,   528,   528,-32768,-32768,    57,-32768,-32768,   702,   703,
    2983,-32768,   700,  4934,   979,  1137,  1337,-32768,  1829,-32768,
  -32768,-32768,-32768,-32768,-32768,   569,-32768,-32768,    97,    97,
      97,   582,   582,   488,   488,   459,   459,   459,   459,   428,
     428,   405,   386,   398,   418,   701,-32768,   704,   392,-32768,
  -32768,   705,-32768,-32768,    73,   618,   707,-32768,   718,-32768,
  -32768,   709,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     461,-32768,   289,-32768,   461,-32768,-32768,   450,-32768,-32768,
  -32768,-32768,-32768,   708,   710,  4028,-32768,-32768,-32768,-32768,
  -32768,-32768,   713,   295,-32768,   730,   275,   712,   706,-32768,
     724,-32768,  4028,  4028,  4028,  4028,  4028,  4028,  4028,  4028,
    4028,-32768,  3874,  4028,  3874,-32768,  3874,   490,-32768,  3247,
    4966,   490,-32768,-32768,   237,-32768,-32768,-32768,   716,   543,
  -32768,-32768,   200,   455,   717,   733,   739,   732,-32768,   747,
    4028,   279,    58,    58,-32768,-32768,-32768,-32768,   746,   749,
  -32768,   297,-32768,  1960,-32768,  1960,  1137,  1453,-32768,  1337,
  -32768,   723,-32768,  2114,-32768,-32768,   324,   598,  2246,  3797,
  -32768,   631,  1718,-32768,    96,    73,-32768,   750,   751,-32768,
     618,-32768,  4702,   636,  1850,-32768,-32768,   461,-32768,-32768,
     291,  4028,  4028,-32768,-32768,-32768,   773,   756,-32768,-32768,
  -32768,-32768,-32768,  4028,   459,   459,   459,   269,   269,   453,
  -32768,   724,   637,   658,   753,   761,   754,   638,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,  3379,-32768,-32768,  3951,-32768,
    3797,  3797,-32768,  3797,-32768,   328,-32768,   760,  3797,  3797,
  -32768,  1453,  3543,  1960,-32768,  2719,   545,-32768,   766,-32768,
  -32768,-32768,   587,-32768,-32768,    73,  4513,   758,  4028,   762,
     777,-32768,   774,   490,   775,  3797,   782,   707,   789,   795,
     767,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,  3115,-32768,   591,-32768,   811,-32768,  3797,  2719,-32768,
  -32768,-32768,   113,-32768,-32768,   292,    89,  2587,-32768,-32768,
      54,-32768,-32768,-32768,   570,-32768,   798,-32768,   601,-32768,
  -32768,-32768,-32768,   329,   685,  3874,  3874,-32768,-32768,   801,
     804,   805,-32768,-32768,   806,   808,  3543,  1960,   585,   142,
  -32768,-32768,   694,   819,  2246,-32768,   833,   822,  4822,-32768,
     823,-32768,-32768,   720,  3115,   814,  2719,   815,  2719,   618,
    2719,-32768,  1718,-32768,   820,   830,-32768,   831,-32768,  4966,
     853,-32768,  3720,-32768,-32768,  3720,-32768,  3720,-32768,  1850,
  -32768,-32768,-32768,-32768,   825,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   858,-32768,   838,-32768,   153,-32768,-32768,   841,
    2719,-32768,-32768,   843,   832,-32768,   844,-32768,   852,-32768,
  -32768,-32768,-32768,   707,-32768,   181,   861,-32768,-32768,   861,
  -32768,-32768,-32768,   877,-32768,   879,-32768,-32768,-32768,-32768,
    3797,   851,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   425,
     863,   864,  3797,   779,-32768,-32768,-32768,-32768,   866,   871,
  -32768,-32768,-32768,-32768,-32768,   888,   897,-32768
};

static const short yypgoto[] =
{
    -598,   559,   316,-32768,   714,   857,    -2,   948,   -54,   219,
       5,   -45,    68,  -436,  -429,  -443,   332,     4,-32768,-32768,
  -32768,-32768,   834,-32768,-32768,-32768,   151,  -434,   839,   817,
     818,  -131,   447,-32768,   186,    24,   118,     7,   365,  1001,
     322,  -219,    -1,   579,   576,   566,    27,  -327,    -4,   485,
    -295,  -228,  -552,   125,  -514,  -100,   344,   345,   347,-32768,
  -32768,  -293,-32768,-32768,  -218,   104,-32768,-32768,-32768,  -593,
  -32768,-32768,-32768,  -655,-32768,-32768,-32768,-32768,   128,   512,
    -192,   541,  -138,    40,  -585,   -46,  -124,   807,    26,-32768,
     -97,   809,   810,-32768,-32768,   -90,   812,    75,-32768,-32768,
       3,    66,-32768,    56,-32768,-32768,-32768,   731,   525,-32768,
     381,-32768,-32768,-32768,-32768,-32768,-32768,  -589,-32768,-32768,
  -32768,-32768,  -267,   -79,   -56,    -9,   755,  -188,-32768,   120,
    -216,   351,-32768,-32768,   -35,   -21,-32768,   -10,  -152,-32768,
  -32768,  -165,  -392,-32768,  -584,  -119,  -118,  -601,  -142,-32768,
    -140,   562,   609,-32768,   235,   150,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   124,-32768,   197,-32768,   129,-32768,-32768,
    -328,  -300,   421,  -441,  -580,-32768,   671,-32768,-32768,-32768,
  -32768,   325,-32768,-32768,-32768,   -42,  -186,-32768,   380,-32768,
  -32768,   679,   492,   276,-32768,-32768,  -565,-32768,-32768,-32768,
  -32768,-32768,-32768,  -574,    -3,-32768,-32768,  -454,-32768,  -314
};


#define	YYLAST		5106


static const short yytable[] =
{
     111,   207,   167,   367,   215,   189,   186,   229,   368,   369,
     377,   184,   378,   472,   183,   219,   414,   597,   450,   510,
     395,   318,   182,   434,   384,   365,   301,   306,   354,   304,
     354,   169,   170,   620,   729,   171,   172,   613,   575,   735,
     173,   194,   195,   760,   243,   614,   366,   740,   208,   583,
     460,   628,   292,   669,   712,   758,     9,   431,   743,   313,
     759,   543,     9,     9,   766,   526,    10,   291,   238,   284,
     768,   468,   644,   348,   469,   749,   216,   364,   583,   127,
     297,   303,   513,   407,   824,   825,   233,   298,   305,   645,
     214,   196,   221,   648,    39,    40,   466,  -563,   578,   347,
     772,   -46,   348,   393,   520,   347,   507,   456,   348,   423,
     501,   296,   461,    19,   349,   579,   218,   307,   398,   821,
     822,   241,   241,   111,    76,   217,   561,   744,    19,    19,
     314,   239,   239,   219,   809,   818,   779,    19,    66,   521,
      78,   296,   399,   841,   819,   348,   219,   197,   407,   669,
       5,   315,    76,   856,     9,   858,   760,   376,   111,    62,
     221,   842,   197,   197,   215,   231,   800,    65,    66,   374,
     445,   224,   304,   877,   356,   501,   186,   186,   229,   613,
     350,   184,    76,   878,   183,   242,   242,   614,    76,    76,
     614,   389,   182,   406,   216,   882,   297,   303,    66,  -563,
     186,   887,   127,    76,    76,   546,   769,   216,   335,   350,
     374,   888,    76,   221,   729,   350,   182,   688,   401,   735,
     712,    15,   462,   297,   303,   599,   434,   740,   760,   459,
     298,   305,   590,   548,   218,   447,   216,   127,   743,   302,
     758,   238,   547,   661,   857,   759,   238,   218,   445,   766,
     214,   684,   350,   232,   628,   768,   217,  -539,  -539,   620,
     431,   234,   365,   373,   229,   229,    66,   787,   685,   213,
     886,   354,   614,   696,  -539,   465,   218,   559,   431,   674,
      76,   678,   562,   679,   430,   217,   401,   284,   241,   431,
     241,   444,   302,   583,   241,   658,  -563,   553,   239,   241,
     239,   218,    15,   221,   239,   563,   659,   564,   646,   239,
     770,   700,   423,   597,   364,   653,   287,   308,   431,    66,
     647,    15,   647,   771,   309,   696,   491,   492,   685,   502,
     423,   411,   310,    76,   311,   295,   413,   312,   486,   487,
     241,   423,   509,   241,   707,   512,   241,   290,    19,   831,
     239,   334,   242,   239,   242,   708,   239,   614,   242,   535,
     659,   696,   536,   242,   682,   482,   482,   512,   335,   223,
     423,   410,   524,    43,   173,   202,   641,   477,   483,   538,
     206,   111,   224,   219,   545,   186,   544,   213,   202,   186,
     519,   696,   293,   434,   184,   329,   549,   183,   301,   306,
     213,   182,   555,   186,   242,   182,   330,   242,     9,    66,
     242,   111,   318,   318,   216,   670,   173,   356,   216,   182,
     445,   186,   304,    76,   218,    19,   751,   431,   331,   213,
     807,   332,   186,   221,   488,   489,   490,   182,   373,   589,
     327,   323,   324,   213,   216,   896,   328,   598,   182,   372,
     459,   649,   297,   303,   218,   542,   465,   383,   218,   197,
     127,   186,   780,   781,   325,   387,   326,   217,   671,   774,
     784,   785,  -369,   297,   303,   390,  -369,   182,    19,   423,
     298,   305,   833,   834,   218,   -76,   373,   430,   565,   391,
     127,   319,   320,   217,   566,   522,   394,   222,   400,   223,
      76,   321,   322,   803,   241,   430,    19,   527,   528,   529,
     196,   490,   224,   373,   239,   213,   430,    19,   527,   528,
     529,   213,   868,   370,   371,   870,   397,   868,   412,   482,
     482,   482,   482,   431,   622,   202,   545,   442,   380,    66,
     197,   381,   441,   530,   446,   430,   301,   306,     9,   451,
     656,   197,    10,    76,   530,    39,    40,   689,   186,     9,
    -368,   385,   386,    10,  -368,   445,   470,   471,   242,   374,
     186,   453,   623,   624,   182,   790,   398,   213,    19,   463,
     589,    76,   464,   816,   848,   423,   182,     9,   316,   317,
     794,   795,    76,   859,   812,   813,   505,   899,  -270,    19,
     826,   827,   767,   864,   829,   830,   514,   213,  -268,   211,
      19,   213,   197,   706,   186,   840,   398,   367,   377,   184,
     378,    76,   183,   556,   538,   713,   333,   695,   730,   879,
     182,   745,   525,   197,   334,   542,   241,   213,   368,   369,
     756,   481,   484,   567,   197,   568,   239,   606,   607,   499,
     500,   335,   891,    76,   430,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   893,   894,   895,   569,   622,
     215,   482,   482,   482,    76,   482,   186,   570,   173,   695,
     851,   219,   903,   576,   904,    76,   493,   494,   577,   782,
     667,   668,   182,   213,   582,   788,   186,   580,   241,   581,
     242,   184,   586,   587,   183,   588,   793,   741,   239,   594,
     229,   796,   182,   595,   600,   695,   608,   609,   612,   757,
     629,   625,   638,  -269,   651,   630,   348,   211,   652,   220,
     642,   657,   660,   663,   703,   709,   662,   730,   690,   186,
     211,   -77,   216,   598,   184,   695,   686,   183,   198,   198,
     820,   198,   215,   756,   691,   182,   211,   482,   482,   482,
     430,   692,   242,   693,   212,   694,   225,   698,   714,   211,
     699,   747,   748,   753,   773,   601,   658,   775,   783,   198,
     198,   601,   218,   211,  -185,   776,   791,   767,   799,   442,
     538,   217,   801,   802,   211,   804,   806,   186,   349,   186,
     730,   186,   184,   808,   184,   183,   184,   183,   730,   183,
     810,   811,   814,   182,   828,   182,   741,   182,   866,   835,
     844,   869,   832,   866,   216,   756,   836,   837,   838,   873,
     839,   843,   757,   225,   846,   213,   225,   410,   213,   847,
     875,   186,   482,   622,   852,   855,   184,   220,   849,   183,
      19,   861,   862,   863,   865,   211,  -186,   182,   876,   874,
     220,   211,   880,   398,   218,   883,   884,    33,    34,   198,
      36,    37,    38,   217,   885,   241,   220,   347,   889,   741,
     890,   892,   212,   897,   235,   239,   898,   741,   906,   220,
     900,   199,   199,   902,   199,   212,   901,   907,   815,   299,
     300,   508,   288,   220,   757,   601,   604,   289,   504,   226,
     503,   212,   574,   672,   220,   673,   860,   211,   601,   601,
     677,   557,   199,   199,   212,    76,   541,   361,   359,   360,
     554,   408,   362,   601,   655,   213,   198,   225,   212,   242,
     687,   396,   506,   792,   845,   539,   198,   211,   198,   212,
     357,   211,   454,   872,   823,   467,   871,   198,   650,   681,
     746,   777,   611,   550,     0,     0,   211,    33,    34,     0,
      36,    37,    38,     0,     0,   220,   226,   211,     0,   226,
       0,   220,   200,   203,   358,   205,     0,     0,     0,     0,
     473,     0,     0,     0,     0,     0,     0,     0,   454,     0,
     227,   198,     0,     0,   198,     0,     0,     0,     0,     0,
       0,    66,   199,   236,   236,     0,     0,   213,   601,     0,
       0,     0,     0,   475,   475,    76,     0,     0,   571,     0,
       0,     0,     0,   211,     0,    19,   572,   220,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,     0,   573,     0,   199,   199,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   220,     0,   474,
       0,   220,   212,   225,     0,     0,     0,     0,     0,   199,
     226,     0,   226,   226,     0,     0,   220,     0,     0,   199,
       0,   199,     0,     0,   198,   455,    66,   220,     0,   363,
     199,     0,   212,   382,     0,     0,   212,     0,    19,     0,
      76,     0,     0,     0,     0,     0,    33,    34,     0,    36,
      37,    38,     0,     0,   198,    33,    34,     0,    36,    37,
      38,   198,   212,   358,     0,     0,   680,     0,     0,     0,
     683,   455,   358,     0,   199,     0,     0,   199,   615,     0,
       0,     0,     0,   220,     0,     0,     0,     0,     0,     0,
      66,     0,   454,     0,     0,     0,   476,   476,     0,    66,
     443,   227,     0,   602,    76,   211,     0,     0,   211,   602,
     236,     0,   236,    76,     0,     0,   236,     0,   212,   617,
       0,   236,     0,    19,     0,     0,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     420,     0,     0,     0,     0,     0,   226,     0,     0,     0,
       0,     0,     0,     0,     0,   518,     0,   616,   198,     0,
       0,     0,   236,     0,     0,   236,     0,   199,   236,     0,
       0,     0,    33,    34,   198,    36,    37,    38,   198,     0,
       0,   198,     0,     0,    66,     0,     0,   227,   227,   358,
     211,     0,     0,     0,     0,     0,     0,   199,    76,     0,
       0,     0,     0,     0,   199,   211,     0,     0,     0,     0,
       0,     0,   805,     0,     0,     0,    66,     0,     0,     0,
       0,     0,     0,     0,   198,   220,     0,     0,   220,     0,
      76,     0,     0,   602,     0,   455,     0,     0,     0,     0,
       0,   455,   455,     0,     0,     0,   603,     0,     0,     0,
       0,     0,   603,     0,   495,   496,   497,   498,   531,     0,
     212,   617,   476,   476,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   211,     0,     0,   473,   198,
       0,     0,     0,     0,     0,     0,   198,   211,   558,     0,
       0,   198,     0,     0,     0,   205,     0,     0,     0,     0,
       0,   199,     0,     0,     0,     0,     0,     0,     0,     0,
     220,     0,     0,     0,     0,     0,     0,   199,     0,     0,
       0,   199,     0,     0,   199,   220,   236,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
       0,     0,     0,   420,     0,   212,     0,     0,     0,     0,
     420,     0,     0,     0,     0,     0,     0,   619,     0,   198,
     212,   420,     0,     0,     0,     0,     0,   199,     0,     0,
       0,     0,   420,     0,     0,     0,   603,     0,     0,     0,
       0,     0,     0,     0,    66,     0,     0,     0,     0,   603,
     603,     0,   633,     0,   615,   220,     0,     0,    76,   225,
       0,   420,     0,     0,   702,     0,     0,   220,   531,     0,
       0,     0,   531,     0,     0,   531,     0,     0,     0,     0,
       0,     0,   199,     0,     0,     0,     0,     0,     0,   199,
       0,     0,     0,     0,   199,     0,     0,     0,     0,    19,
       0,     0,   212,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,     0,     0,   236,     0,
       0,     0,     0,   198,     0,     0,     0,     0,     0,     0,
       0,     0,     9,   701,     0,     0,    10,     0,     0,     0,
       0,     0,     0,     0,  -368,     0,     0,     0,  -368,   702,
       0,     0,     0,   664,   665,   666,   420,   420,   420,   420,
     420,   420,   199,   420,   420,   420,     0,   420,     0,     0,
     420,     0,     9,   633,    76,     0,    10,     0,     0,     0,
     236,     0,     0,    19,   453,   531,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,   226,    36,    37,    38,    39,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   235,     0,     0,
       0,     0,     0,    19,     0,     0,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,     0,    36,    37,    38,    39,    40,     0,     0,
       0,     0,     0,   797,   420,     0,     0,   235,    76,     0,
       0,     0,     0,     0,     0,     0,   199,     0,     0,     0,
       0,     0,     0,     0,    19,     0,   420,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,   227,    36,    37,    38,     0,    76,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   388,     6,
       0,     7,     8,     9,     0,     0,     0,    10,     0,    11,
      12,     0,     0,     0,     0,    14,     0,   348,     0,    15,
       0,     0,     0,     0,     0,    66,     0,     0,    16,     0,
       0,     0,    17,     0,     0,    18,     0,     0,     0,    76,
       0,     0,     0,     0,     0,     0,     0,   236,     0,     0,
       0,     0,     0,     0,    19,     0,   420,   420,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,   715,    36,    37,    38,    39,    40,    41,
      42,     0,   180,    45,    46,    47,    48,    49,   716,    51,
      52,    53,    54,    55,    56,    57,    58,    59,     0,    60,
     717,   718,     0,    61,   719,   720,    62,   721,    63,     0,
      64,   722,   723,   724,    65,    66,    67,   725,    68,    69,
     726,    70,    71,    72,   727,    73,   728,    74,    75,    76,
      77,     6,    78,     7,     8,     9,     0,     0,     0,    10,
       0,    11,    12,     0,     0,     0,    13,    14,     0,     0,
       0,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     754,     0,     0,     0,    17,   621,     0,    18,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,     0,     0,     0,     0,    19,   527,   528,   529,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,    36,    37,    38,    39,
      40,    41,    42,    43,   180,    45,    46,    47,    48,    49,
     418,    51,   755,    53,    54,    55,    56,    57,    58,    59,
       0,     0,     0,     0,     0,    61,     0,     0,    62,     0,
      63,     0,    64,     0,     0,     0,    65,    66,    67,     0,
      68,    69,     0,    70,    71,    72,     0,    73,     0,    74,
      75,    76,    77,     6,    78,     7,     8,     9,     0,     0,
       0,    10,     0,    11,    12,     0,     0,     0,    13,    14,
       0,     0,     0,    15,     0,     0,     0,     0,     0,     0,
       0,     0,    16,     0,     0,     0,    17,     0,     0,    18,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,     0,     0,     0,     0,     0,    19,     0,
       0,     0,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,     0,    60,     0,     0,     0,    61,     0,     0,
      62,     0,    63,     0,    64,     0,     0,     0,    65,    66,
      67,     0,    68,    69,     0,    70,    71,    72,     0,    73,
       0,    74,    75,    76,    77,   704,    78,     7,     8,     9,
       0,     0,     0,    10,     0,    11,    12,     0,     0,     0,
       0,    14,     0,     0,     0,    15,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    17,     0,
       0,    18,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   179,
      19,     0,     0,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,     0,
      36,    37,    38,    39,    40,    41,    42,     0,   180,    45,
      46,    47,    48,    49,   181,    51,     0,    53,    54,    55,
      56,    57,    58,    59,     0,     0,     0,     0,     0,    61,
       0,     0,    62,     0,    63,     0,    64,     0,     0,     0,
      65,    66,    67,     0,    68,    69,     0,    70,    71,    72,
       0,    73,     0,    74,    75,    76,    77,     6,    78,     7,
       8,     9,     0,     0,     0,    10,     0,    11,    12,     0,
       0,     0,     0,    14,     0,   505,     0,    15,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      17,     0,     0,    18,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,     0,     0,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,    36,    37,    38,     0,     7,     8,     9,     0,
       0,     0,    10,     0,    11,    12,   168,     0,     0,    13,
      14,     0,     0,     0,    15,     0,     0,     0,     0,     0,
       0,    61,     0,    16,    62,     0,    63,    17,    64,     0,
      18,     0,    65,    66,    67,     0,    68,    69,     0,    70,
      71,    72,     0,    73,     0,    74,    75,    76,    77,    19,
      78,     0,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,     0,    60,     0,     0,     0,    61,     0,
       0,    62,     0,    63,     0,    64,     0,     0,     0,    65,
      66,    67,     0,    68,    69,     0,    70,    71,    72,     0,
      73,     0,    74,    75,    76,    77,     0,    78,     7,     8,
       9,     0,     0,     0,    10,     0,    11,    12,     0,     0,
       0,    13,    14,     0,     0,     0,    15,     0,     0,     0,
       0,     0,     0,     0,     0,    16,     0,     0,     0,    17,
       0,     0,    18,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       0,    36,    37,    38,    39,    40,    41,    42,     0,   180,
      45,    46,    47,    48,    49,   181,    51,     0,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,     0,
      61,     0,     0,    62,     0,    63,     0,    64,     0,     0,
       0,    65,    66,    67,     0,    68,    69,     0,    70,    71,
      72,     0,    73,     0,    74,    75,    76,    77,     0,    78,
       7,     8,     9,     0,     0,     0,    10,     0,    11,    12,
       0,     0,     0,    13,    14,     0,     0,     0,    15,     0,
       0,     0,     0,     0,     0,     0,     0,   754,     0,     0,
       0,    17,     0,     0,    18,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,     0,     0,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,     0,    36,    37,    38,    39,    40,    41,    42,
       0,   180,    45,    46,    47,    48,    49,   181,    51,     0,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,     0,    61,     0,     0,    62,     0,    63,     0,    64,
       0,     0,     0,    65,    66,    67,     0,    68,    69,     0,
      70,    71,    72,     0,    73,     0,    74,    75,    76,    77,
       0,    78,     7,     8,     9,     0,     0,     0,    10,     0,
      11,    12,     0,     0,     0,     0,    14,     0,     0,     0,
      15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    17,     0,     0,    18,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   179,    19,     0,     0,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,    36,    37,    38,    39,    40,
      41,    42,     0,   180,    45,    46,    47,    48,    49,   181,
      51,     0,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,     0,    61,     0,     0,    62,     0,    63,
       0,    64,     0,     0,     0,    65,    66,    67,     0,    68,
      69,     0,    70,    71,    72,     0,    73,     0,    74,    75,
      76,    77,     0,    78,     7,     8,     9,     0,     0,     0,
      10,     0,    11,    12,     0,   415,     0,     0,    14,     0,
       0,     0,    15,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,     0,     0,    18,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    19,     0,     0,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,   416,    34,     0,    36,   417,    38,
      39,    40,    41,    42,     0,   180,    45,    46,    47,    48,
      49,   418,    51,     0,    53,    54,    55,    56,    57,    58,
      59,     0,     0,     0,     0,     0,    61,     0,     0,    62,
       0,    63,     0,    64,     0,     0,     0,    65,    66,    67,
       0,    68,    69,     0,    70,   419,    72,     0,    73,     0,
      74,    75,    76,    77,     0,    78,     7,     8,     9,     0,
       0,     0,    10,     0,    11,    12,     0,   610,     0,     0,
      14,     0,     0,     0,    15,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    17,     0,     0,
      18,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
       0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,     0,    36,
      37,    38,    39,    40,    41,    42,     0,   180,    45,    46,
      47,    48,    49,   181,    51,     0,    53,    54,    55,    56,
      57,    58,    59,     0,     0,     0,     0,     0,    61,     0,
       0,    62,     0,    63,     0,    64,     0,     0,     0,    65,
      66,    67,     0,    68,    69,     0,    70,   419,    72,     0,
      73,     0,    74,    75,    76,    77,     0,    78,     7,     8,
       9,     0,     0,     0,    10,     0,    11,    12,     0,     0,
       0,     0,    14,     0,     0,     0,    15,     0,     0,     0,
       0,     0,     0,     0,     0,    16,     0,     0,     0,    17,
       0,     0,    18,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       0,    36,    37,    38,    39,    40,    41,    42,     0,   180,
      45,    46,    47,    48,    49,   181,    51,     0,    53,    54,
      55,    56,    57,    58,    59,     0,     0,     0,     0,     0,
      61,     0,     0,    62,     0,    63,     0,    64,     0,     0,
       0,    65,    66,    67,     0,    68,    69,     0,    70,    71,
      72,     0,    73,     0,    74,    75,    76,    77,     0,    78,
       7,     8,     9,     0,     0,     0,    10,     0,    11,    12,
       0,     0,     0,     0,    14,     0,     0,     0,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,     0,     0,    18,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,     0,     0,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     416,    34,     0,    36,   417,    38,    39,    40,    41,    42,
       0,   180,    45,    46,    47,    48,    49,   418,    51,     0,
      53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
       0,     0,    61,     0,     0,    62,     0,    63,     0,    64,
       0,     0,     0,    65,    66,    67,     0,    68,    69,     0,
      70,   419,    72,     0,    73,     0,    74,    75,    76,    77,
       0,    78,     7,     8,     9,     0,     0,     0,    10,     0,
      11,    12,     0,     0,     0,     0,    14,     0,     0,     0,
      15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    17,     0,     0,    18,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    19,     0,     0,     0,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,     0,    36,    37,    38,    39,    40,
      41,    42,     0,   180,    45,    46,    47,    48,    49,   181,
      51,     0,    53,    54,    55,    56,    57,    58,    59,     0,
       0,     0,     0,     0,    61,     0,     0,    62,     0,    63,
       0,    64,     0,     0,     0,    65,    66,    67,     0,    68,
      69,     0,    70,   419,    72,     0,    73,     0,    74,    75,
      76,    77,     0,    78,     7,     8,     9,     0,     0,     0,
      10,     0,    11,    12,     0,     0,     0,     0,    14,     0,
       0,     0,    15,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,     0,     0,    18,     0,
       0,     0,     0,     0,   615,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    19,     0,     0,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,     0,    36,    37,    38,
      39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   168,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    61,     0,     0,    62,
       0,    63,     0,    64,     0,     0,     0,    65,    66,    67,
       0,    68,    69,   786,    70,     0,    72,     0,    73,     0,
      74,    75,    76,    77,     0,    78,     7,     8,     9,     0,
       0,     0,    10,     0,    11,    12,     0,     0,     0,     0,
      14,     0,   505,     0,    15,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    76,     0,     0,    17,     0,     0,
      18,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
       0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,     0,    36,
      37,    38,     0,     7,     8,     9,     0,     0,     0,    10,
       0,    11,    12,   168,     0,     0,    13,    14,     0,     0,
       0,    15,     0,     0,     0,     0,     0,     0,    61,     0,
       0,    62,     0,    63,    17,    64,     0,    18,     0,    65,
      66,    67,     0,    68,    69,     0,    70,    71,    72,     0,
      73,     0,    74,    75,    76,    77,    19,    78,     0,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,    36,    37,    38,     0,
       7,     8,     9,     0,     0,     0,    10,     0,    11,    12,
     168,     0,     0,     0,    14,     0,     0,     0,    15,     0,
       0,     0,     0,     0,     0,    61,     0,     0,    62,     0,
      63,    17,    64,     0,    18,     0,    65,    66,    67,     0,
      68,    69,     0,    70,    71,    72,     0,    73,     0,    74,
      75,    76,    77,    19,    78,     0,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,     0,    36,    37,    38,     0,     7,     8,     9,
       0,     0,     0,    10,     0,    11,    12,   168,     0,     0,
       0,    14,     0,     0,     0,    15,     0,     0,     0,     0,
       0,     0,    61,     0,     0,    62,     0,    63,    17,    64,
       0,    18,     0,    65,    66,    67,     0,    68,    69,     0,
      70,    71,    72,     0,    73,     0,    74,    75,    76,    77,
      19,    78,     0,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,     0,
      36,    37,    38,     0,     7,     8,     9,     0,     0,     0,
      10,     0,    11,    12,   168,     0,     0,     0,    14,   778,
       0,     0,    15,     0,     0,     0,     0,     0,     0,    61,
       0,     0,    62,     0,    63,    17,    64,     0,    18,     0,
      65,    66,    67,     0,    68,    69,     0,    70,   419,    72,
       0,    73,     0,    74,    75,    76,    77,    19,    78,     0,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,     0,    36,    37,    38,
       0,     7,     8,     9,     0,     0,     0,    10,     0,    11,
      12,   168,     0,     0,     0,    14,     0,     0,     0,    15,
       0,     0,     0,     0,     0,     0,    61,     0,     0,    62,
       0,    63,    17,    64,     0,    18,     0,    65,    66,    67,
       0,    68,    69,     0,    70,     0,    72,     0,    73,     0,
      74,    75,    76,    77,    19,    78,     0,     0,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,    36,    37,    38,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   168,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    61,     0,     0,    62,     0,    63,     0,
      64,     0,     0,     0,    65,    66,    67,     0,    68,    69,
       0,    70,     0,    72,     0,    73,     0,    74,    75,    76,
      77,     0,    78,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,     0,   257,     0,     0,
       0,   258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,    15,     0,    19,     0,     0,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,     0,    36,    37,    38,    39,
      40,     9,     0,     0,     0,    10,     0,     0,     0,    19,
     235,     0,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   282,    36,
      37,    38,    39,    40,     0,     0,   283,     0,    11,    12,
       0,     0,     0,   235,     0,     0,     0,     0,    15,     0,
       0,    76,    19,     0,     0,     0,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,    36,    37,    38,    39,    40,     0,     0,     0,
       0,     0,     0,    19,    76,     0,   235,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,     0,    36,    37,    38,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   168,     0,     0,
     209,     0,     0,     0,     0,     0,     0,    76,    15,     0,
       0,     0,    61,     0,     0,    62,     0,    63,     0,    64,
       0,     0,     0,    65,    66,    67,     0,    68,    69,     0,
      70,     0,    72,     0,    73,     0,    74,    75,    76,    77,
       0,    78,     0,    19,     0,     0,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
       0,    44,    45,    46,    47,    48,    49,   210,    51,    52,
      53,    54,    55,    56,    57,    58,    59,   412,    60,     0,
       0,     0,     0,     0,     0,    15,     0,     0,     0,     0,
       0,     0,     0,     0,    66,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    76,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,     0,     0,     0,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,     0,
      36,    37,    38,    39,    40,    41,    42,     0,   180,    45,
      46,    47,    48,    49,   392,    51,     0,    53,    54,    55,
      56,    57,    58,    59,    15,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    66,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    76,     0,     0,     0,    19,
       0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   715,    36,
      37,    38,    39,    40,    41,    42,     0,   180,    45,    46,
      47,    48,    49,   798,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    15,    60,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      66,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    76,     0,     0,     0,    19,     0,
       0,     0,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,    36,    37,
      38,    39,    40,    41,    42,     0,   180,    45,    46,    47,
      48,    49,   392,    51,     0,    53,    54,    55,    56,    57,
      58,    59,    15,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    66,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    76,   750,     0,     0,    19,     0,     0,
       0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,     0,    36,    37,    38,
       0,     0,     0,     0,     0,     0,     0,     0,    19,     0,
       0,   388,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,     0,    36,    37,
      38,    39,    40,     0,     0,     0,     0,     0,    66,     0,
       0,     0,   235,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    76,     0,     0,     0,    19,     0,     0,     0,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    76,    44,    45,    46,    47,    48,    49,
     210,    51,    52,    53,    54,    55,    56,    57,    58,    59,
       0,    60,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    66,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    19,     0,
       0,    76,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   715,    36,    37,
      38,    39,    40,    41,    42,     0,   180,    45,    46,    47,
      48,    49,   798,    51,    52,    53,    54,    55,    56,    57,
      58,    59,     0,    60,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    66,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      19,     0,     0,    76,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,     0,
      36,    37,    38,    39,    40,    41,    42,     0,   180,    45,
      46,    47,    48,    49,   392,    51,     0,    53,    54,    55,
      56,    57,    58,    59,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,     0,     0,     0,
       0,    66,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    19,     0,   407,    76,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,     0,    36,    37,    38,    39,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   235,     0,     0,     0,
       0,     0,     0,     0,     0,    76,     0,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
       0,     0,     0,     0,     0,     0,    39,    40,    41,    42,
       0,   180,    45,    46,    47,    48,    49,    76,    51,     0,
      53,    54,    55,    56,    57,    58,    59
};

static const short yycheck[] =
{
       4,    43,     5,   127,    50,    15,    15,    52,   127,   127,
     152,    15,   152,   308,    15,    50,   208,   451,   234,   347,
     185,   100,    15,   209,   162,   122,    82,    83,   118,    83,
     120,     7,     8,   476,   632,    11,    12,   473,   430,   632,
      13,    17,    18,   644,    65,   474,   125,   632,    44,   441,
     238,   505,    73,   567,   628,   644,     5,   209,   632,    94,
     644,   389,     5,     5,   644,   379,     9,    71,    65,    66,
     644,   287,   526,    19,   290,   640,    50,   122,   470,     4,
      82,    83,   349,    90,    30,    31,    62,    82,    83,   530,
      50,    19,    11,   534,    79,    80,   284,     1,    14,    16,
     652,     0,    19,   182,   371,    16,   334,   238,    19,   209,
     329,    90,   243,    56,    31,    31,    50,    93,    31,    30,
      31,    65,    66,   127,   131,    50,   419,    31,    56,    56,
      33,    65,    66,   168,   727,    22,   688,    56,   117,   124,
     134,    90,    55,     1,    31,    19,   181,    90,    90,   663,
     137,    54,   131,   808,     5,   810,   757,    31,   162,   108,
      11,    19,    90,    90,   210,    21,   718,   116,   117,   145,
     224,    90,   226,    20,   118,   394,   185,   186,   223,   615,
     126,   185,   131,    30,   185,    65,    66,   616,   131,   131,
     619,    23,   185,   196,   168,   850,   198,   199,   117,     1,
     209,    20,   127,   131,   131,   393,   647,   181,    40,   126,
     186,    30,   131,    11,   812,   126,   209,    17,    20,   812,
     794,    21,   243,   225,   226,   453,   412,   812,   829,   238,
     225,   226,   448,   398,   168,   231,   210,   162,   812,    90,
     829,   238,   394,   557,   809,   829,   243,   181,   302,   829,
     210,    14,   126,    13,   708,   829,   181,    14,    15,   702,
     412,    13,   359,   143,   309,   310,   117,   703,    31,    50,
     863,   361,   701,   600,    31,   284,   210,   415,   430,   572,
     131,   574,    13,   576,   209,   210,    20,   284,   232,   441,
     234,   223,    90,   685,   238,    20,     1,    31,   232,   243,
     234,   235,    21,    11,   238,    36,    31,    38,    19,   243,
      19,    14,   412,   747,   359,    20,    13,    17,   470,   117,
      31,    21,    31,   651,    24,   652,   319,   320,    31,   330,
     430,   203,    32,   131,    34,    56,   208,    37,   314,   315,
     284,   441,   346,   287,    20,   349,   290,    13,    56,    20,
     284,    23,   232,   287,   234,    31,   290,   786,   238,    16,
      31,   688,    19,   243,   580,   309,   310,   371,    40,    77,
     470,    15,   376,    83,   347,    19,   516,   309,   310,   383,
      90,   385,    90,   418,   393,   394,   390,   168,    19,   398,
     366,   718,    13,   579,   398,     9,   400,   398,   454,   455,
     181,   394,   405,   412,   284,   398,     8,   287,     5,   117,
     290,   415,   491,   492,   388,   567,   389,   361,   392,   412,
     474,   430,   476,   131,   358,    56,   642,   579,    10,   210,
     725,    39,   441,    11,   316,   317,   318,   430,   318,   448,
      35,    13,    14,   224,   418,    20,    41,   451,   441,    30,
     459,     1,   454,   455,   388,    30,   465,    15,   392,    90,
     385,   470,   690,   691,    36,     1,    38,   392,   568,   661,
     698,   699,    17,   475,   476,    31,    21,   470,    56,   579,
     475,   476,   775,   776,   418,    31,   366,   412,    35,    18,
     415,     3,     4,   418,    41,   375,     9,    75,    15,    77,
     131,    42,    43,   721,   448,   430,    56,    57,    58,    59,
      19,   393,    90,   393,   448,   296,   441,    56,    57,    58,
      59,   302,   822,    30,    31,   825,    22,   827,    13,   473,
     474,   475,   476,   685,   478,    19,   545,   221,    16,   117,
      90,    19,    13,    93,    30,   470,   602,   603,     5,    21,
     553,    90,     9,   131,    93,    79,    80,   592,   567,     5,
      17,     3,     4,     9,    21,   619,     3,     4,   448,   545,
     579,    17,     3,     4,   567,    30,    31,   358,    56,    18,
     589,   131,    22,   748,   802,   685,   579,     5,     6,     7,
       3,     4,   131,   811,     3,     4,    19,   892,     5,    56,
      30,    31,   644,   819,     3,     4,    16,   388,     5,    50,
      56,   392,    90,   623,   623,    30,    31,   741,   760,   623,
     760,   131,   623,     1,   628,   629,    15,   600,   632,   847,
     623,   634,    20,    90,    23,    30,   580,   418,   757,   757,
     644,   309,   310,     9,    90,     8,   580,   461,   462,   327,
     328,    40,   880,   131,   579,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,   883,   884,   885,    10,   613,
     716,   615,   616,   617,   131,   619,   685,    39,   651,   652,
     804,   716,   900,    15,   902,   131,   321,   322,    73,   693,
     565,   566,   685,   474,     1,   705,   705,    15,   642,    15,
     580,   705,    30,    30,   705,    22,   709,   632,   642,    14,
     755,   714,   705,    14,    17,   688,    14,    14,    18,   644,
      16,    20,   104,     5,    16,    20,    19,   168,    15,    50,
      21,     1,    20,     9,    11,   137,    30,   741,    21,   748,
     181,    31,   716,   747,   748,   718,    30,   748,    34,    35,
     753,    37,   798,   757,    21,   748,   197,   701,   702,   703,
     685,    22,   642,    31,    50,    18,    52,    21,   137,   210,
      21,    21,    21,   137,     1,   459,    20,    16,    18,    65,
      66,   465,   716,   224,    31,    31,    20,   829,    30,   473,
     794,   716,    30,    16,   235,    21,    21,   806,    31,   808,
     804,   810,   806,    21,   808,   806,   810,   808,   812,   810,
      21,    16,     1,   806,    16,   808,   741,   810,   822,    18,
       1,   825,   137,   827,   798,   829,    22,    22,    22,   832,
      22,   137,   757,   119,     1,   616,   122,    15,   619,    16,
     843,   850,   786,   787,    30,    30,   850,   168,   128,   850,
      56,    31,    22,    22,     1,   296,    31,   850,    20,     1,
     181,   302,    21,    31,   798,    22,    22,    73,    74,   155,
      76,    77,    78,   798,    22,   819,   197,    16,     1,   804,
       1,    30,   168,    20,    90,   819,    22,   812,     0,   210,
     111,    34,    35,    22,    37,   181,    30,     0,   747,    82,
      82,   335,    68,   224,   829,   589,   459,    68,   332,    52,
     331,   197,   427,   569,   235,   570,   812,   358,   602,   603,
     573,   409,    65,    66,   210,   131,   385,   120,   119,   119,
     405,   200,   120,   617,   553,   716,   222,   223,   224,   819,
     589,   186,   333,   708,   794,   383,   232,   388,   234,   235,
      56,   392,   238,   829,   757,   284,   827,   243,   537,   579,
     635,   685,   470,   404,    -1,    -1,   407,    73,    74,    -1,
      76,    77,    78,    -1,    -1,   296,   119,   418,    -1,   122,
      -1,   302,    34,    35,    90,    37,    -1,    -1,    -1,    -1,
      11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,
      52,   287,    -1,    -1,   290,    -1,    -1,    -1,    -1,    -1,
      -1,   117,   155,    65,    66,    -1,    -1,   798,   702,    -1,
      -1,    -1,    -1,   309,   310,   131,    -1,    -1,    15,    -1,
      -1,    -1,    -1,   474,    -1,    56,    23,   358,    -1,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    -1,    40,    -1,   198,   199,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,   388,    -1,    90,
      -1,   392,   358,   359,    -1,    -1,    -1,    -1,    -1,   222,
     223,    -1,   225,   226,    -1,    -1,   407,    -1,    -1,   232,
      -1,   234,    -1,    -1,   380,   238,   117,   418,    -1,    56,
     243,    -1,   388,   155,    -1,    -1,   392,    -1,    56,    -1,
     131,    -1,    -1,    -1,    -1,    -1,    73,    74,    -1,    76,
      77,    78,    -1,    -1,   410,    73,    74,    -1,    76,    77,
      78,   417,   418,    90,    -1,    -1,   577,    -1,    -1,    -1,
     581,   284,    90,    -1,   287,    -1,    -1,   290,    11,    -1,
      -1,    -1,    -1,   474,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,   448,    -1,    -1,    -1,   309,   310,    -1,   117,
     222,   223,    -1,   459,   131,   616,    -1,    -1,   619,   465,
     232,    -1,   234,   131,    -1,    -1,   238,    -1,   474,   475,
      -1,   243,    -1,    56,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
     209,    -1,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    56,    -1,    90,   514,    -1,
      -1,    -1,   284,    -1,    -1,   287,    -1,   380,   290,    -1,
      -1,    -1,    73,    74,   530,    76,    77,    78,   534,    -1,
      -1,   537,    -1,    -1,   117,    -1,    -1,   309,   310,    90,
     701,    -1,    -1,    -1,    -1,    -1,    -1,   410,   131,    -1,
      -1,    -1,    -1,    -1,   417,   716,    -1,    -1,    -1,    -1,
      -1,    -1,   723,    -1,    -1,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   580,   616,    -1,    -1,   619,    -1,
     131,    -1,    -1,   589,    -1,   448,    -1,    -1,    -1,    -1,
      -1,   454,   455,    -1,    -1,    -1,   459,    -1,    -1,    -1,
      -1,    -1,   465,    -1,   323,   324,   325,   326,   380,    -1,
     616,   617,   475,   476,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   786,    -1,    -1,    11,   635,
      -1,    -1,    -1,    -1,    -1,    -1,   642,   798,   410,    -1,
      -1,   647,    -1,    -1,    -1,   417,    -1,    -1,    -1,    -1,
      -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     701,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
      -1,   534,    -1,    -1,   537,   716,   448,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    -1,    -1,   412,    -1,   701,    -1,    -1,    -1,    -1,
     419,    -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,   715,
     716,   430,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   589,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,   602,
     603,    -1,   514,    -1,    11,   786,    -1,    -1,   131,   755,
      -1,   470,    -1,    -1,   617,    -1,    -1,   798,   530,    -1,
      -1,    -1,   534,    -1,    -1,   537,    -1,    -1,    -1,    -1,
      -1,    -1,   635,    -1,    -1,    -1,    -1,    -1,    -1,   642,
      -1,    -1,    -1,    -1,   647,    -1,    -1,    -1,    -1,    56,
      -1,    -1,   798,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    -1,    -1,   580,    -1,
      -1,    -1,    -1,   819,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    90,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,   702,
      -1,    -1,    -1,   562,   563,   564,   565,   566,   567,   568,
     569,   570,   715,   572,   573,   574,    -1,   576,    -1,    -1,
     579,    -1,     5,   635,   131,    -1,     9,    -1,    -1,    -1,
     642,    -1,    -1,    56,    17,   647,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,   755,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    -1,    -1,
      -1,    -1,    -1,   715,   663,    -1,    -1,    90,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   819,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    56,    -1,   685,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,   755,    76,    77,    78,    -1,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,     1,
      -1,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,
      12,    -1,    -1,    -1,    -1,    17,    -1,    19,    -1,    21,
      -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   819,    -1,    -1,
      -1,    -1,    -1,    -1,    56,    -1,   775,   776,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,    -1,   105,   106,   107,   108,   109,   110,    -1,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,     1,   134,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    11,    12,    -1,    -1,    -1,    16,    17,    -1,    -1,
      -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    56,    -1,    37,    -1,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    -1,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    -1,   112,    -1,    -1,    -1,   116,   117,   118,    -1,
     120,   121,    -1,   123,   124,   125,    -1,   127,    -1,   129,
     130,   131,   132,     1,   134,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    11,    12,    -1,    -1,    -1,    16,    17,
      -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    37,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,    -1,   105,    -1,    -1,
     108,    -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,
     118,    -1,   120,   121,    -1,   123,   124,   125,    -1,   127,
      -1,   129,   130,   131,   132,     1,   134,     3,     4,     5,
      -1,    -1,    -1,     9,    -1,    11,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,
      -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,
     116,   117,   118,    -1,   120,   121,    -1,   123,   124,   125,
      -1,   127,    -1,   129,   130,   131,   132,     1,   134,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    11,    12,    -1,
      -1,    -1,    -1,    17,    -1,    19,    -1,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    -1,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    11,    12,    90,    -1,    -1,    16,
      17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
      -1,   105,    -1,    30,   108,    -1,   110,    34,   112,    -1,
      37,    -1,   116,   117,   118,    -1,   120,   121,    -1,   123,
     124,   125,    -1,   127,    -1,   129,   130,   131,   132,    56,
     134,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,   116,
     117,   118,    -1,   120,   121,    -1,   123,   124,   125,    -1,
     127,    -1,   129,   130,   131,   132,    -1,   134,     3,     4,
       5,    -1,    -1,    -1,     9,    -1,    11,    12,    -1,    -1,
      -1,    16,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
     105,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,
      -1,   116,   117,   118,    -1,   120,   121,    -1,   123,   124,
     125,    -1,   127,    -1,   129,   130,   131,   132,    -1,   134,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,    12,
      -1,    -1,    -1,    16,    17,    -1,    -1,    -1,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,   116,   117,   118,    -1,   120,   121,    -1,
     123,   124,   125,    -1,   127,    -1,   129,   130,   131,   132,
      -1,   134,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,   112,    -1,    -1,    -1,   116,   117,   118,    -1,   120,
     121,    -1,   123,   124,   125,    -1,   127,    -1,   129,   130,
     131,   132,    -1,   134,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    11,    12,    -1,    14,    -1,    -1,    17,    -1,
      -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,
      -1,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,   118,
      -1,   120,   121,    -1,   123,   124,   125,    -1,   127,    -1,
     129,   130,   131,   132,    -1,   134,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    11,    12,    -1,    14,    -1,    -1,
      17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    -1,   112,    -1,    -1,    -1,   116,
     117,   118,    -1,   120,   121,    -1,   123,   124,   125,    -1,
     127,    -1,   129,   130,   131,   132,    -1,   134,     3,     4,
       5,    -1,    -1,    -1,     9,    -1,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      -1,    76,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
      95,    96,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
     105,    -1,    -1,   108,    -1,   110,    -1,   112,    -1,    -1,
      -1,   116,   117,   118,    -1,   120,   121,    -1,   123,   124,
     125,    -1,   127,    -1,   129,   130,   131,   132,    -1,   134,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,    12,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
      93,    94,    95,    96,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,   116,   117,   118,    -1,   120,   121,    -1,
     123,   124,   125,    -1,   127,    -1,   129,   130,   131,   132,
      -1,   134,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    -1,    93,    94,    95,    96,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,
      -1,   112,    -1,    -1,    -1,   116,   117,   118,    -1,   120,
     121,    -1,   123,   124,   125,    -1,   127,    -1,   129,   130,
     131,   132,    -1,   134,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,
      -1,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    90,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,   105,    -1,    -1,   108,
      -1,   110,    -1,   112,    -1,    -1,    -1,   116,   117,   118,
      -1,   120,   121,    90,   123,    -1,   125,    -1,   127,    -1,
     129,   130,   131,   132,    -1,   134,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
      17,    -1,    19,    -1,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    -1,    -1,    34,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
      77,    78,    -1,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    11,    12,    90,    -1,    -1,    16,    17,    -1,    -1,
      -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,   105,    -1,
      -1,   108,    -1,   110,    34,   112,    -1,    37,    -1,   116,
     117,   118,    -1,   120,   121,    -1,   123,   124,   125,    -1,
     127,    -1,   129,   130,   131,   132,    56,   134,    -1,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    -1,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,    12,
      90,    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,    -1,
      -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,   108,    -1,
     110,    34,   112,    -1,    37,    -1,   116,   117,   118,    -1,
     120,   121,    -1,   123,   124,   125,    -1,   127,    -1,   129,
     130,   131,   132,    56,   134,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    -1,     3,     4,     5,
      -1,    -1,    -1,     9,    -1,    11,    12,    90,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    34,   112,
      -1,    37,    -1,   116,   117,   118,    -1,   120,   121,    -1,
     123,   124,   125,    -1,   127,    -1,   129,   130,   131,   132,
      56,   134,    -1,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    -1,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    11,    12,    90,    -1,    -1,    -1,    17,    18,
      -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,   105,
      -1,    -1,   108,    -1,   110,    34,   112,    -1,    37,    -1,
     116,   117,   118,    -1,   120,   121,    -1,   123,   124,   125,
      -1,   127,    -1,   129,   130,   131,   132,    56,   134,    -1,
      -1,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      -1,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,
      12,    90,    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,   108,
      -1,   110,    34,   112,    -1,    37,    -1,   116,   117,   118,
      -1,   120,   121,    -1,   123,    -1,   125,    -1,   127,    -1,
     129,   130,   131,   132,    56,   134,    -1,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    -1,    76,    77,    78,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,
     112,    -1,    -1,    -1,   116,   117,   118,    -1,   120,   121,
      -1,   123,    -1,   125,    -1,   127,    -1,   129,   130,   131,
     132,    -1,   134,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    -1,    17,    -1,    -1,
      -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    21,    -1,    56,    -1,    -1,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,    56,
      90,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,   108,    76,
      77,    78,    79,    80,    -1,    -1,   116,    -1,    11,    12,
      -1,    -1,    -1,    90,    -1,    -1,    -1,    -1,    21,    -1,
      -1,   131,    56,    -1,    -1,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    56,   131,    -1,    90,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,
      13,    -1,    -1,    -1,    -1,    -1,    -1,   131,    21,    -1,
      -1,    -1,   105,    -1,    -1,   108,    -1,   110,    -1,   112,
      -1,    -1,    -1,   116,   117,   118,    -1,   120,   121,    -1,
     123,    -1,   125,    -1,   127,    -1,   129,   130,   131,   132,
      -1,   134,    -1,    56,    -1,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,    13,   101,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,    56,
      -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,    21,   101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,    56,    -1,
      -1,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
      98,    99,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   131,    22,    -1,    -1,    56,    -1,    -1,
      -1,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
      -1,    90,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
      78,    79,    80,    -1,    -1,    -1,    -1,    -1,   117,    -1,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   131,    -1,    -1,    -1,    56,    -1,    -1,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,   131,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
      -1,   131,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      56,    -1,    -1,   131,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    -1,
      76,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
      96,    97,    98,    99,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    56,    -1,    90,   131,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,    -1,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    81,    82,
      -1,    84,    85,    86,    87,    88,    89,   131,    91,    -1,
      93,    94,    95,    96,    97,    98,    99
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "c:/program files/bison/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "c:/program files/bison/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 306 "CxxParser.y"
{ yyval.name = yyvsp[0].identifier; ;
    break;}
case 3:
#line 315 "CxxParser.y"
{ yyval.name = YACC_NAME(yyvsp[0].name); ;
    break;}
case 4:
#line 316 "CxxParser.y"
{ yyval.name = YACC_TEMPLATE_NAME(yyvsp[-4].name, yyvsp[-1].template_arguments); ;
    break;}
case 5:
#line 317 "CxxParser.y"
{ yyval.name = yyvsp[-3].name; ERRMSG("Empty template-argument-list"); ;
    break;}
case 6:
#line 318 "CxxParser.y"
{ yyval.name = YACC_NAME(yyvsp[-2].name); ;
    break;}
case 8:
#line 320 "CxxParser.y"
{ template_test(); ;
    break;}
case 9:
#line 321 "CxxParser.y"
{ yyval.is_template = IS_DEFAULT; ;
    break;}
case 10:
#line 322 "CxxParser.y"
{ yyval.is_template = IS_TEMPLATE; ;
    break;}
case 11:
#line 323 "CxxParser.y"
{ yyval.name = YACC_NESTED_SCOPE(yyvsp[-1].name); ;
    break;}
case 13:
#line 329 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 15:
#line 331 "CxxParser.y"
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 16:
#line 338 "CxxParser.y"
{ yyval.name = YACC_DESTRUCTOR_ID(yyvsp[0].name); ;
    break;}
case 17:
#line 339 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 20:
#line 342 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 22:
#line 344 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 23:
#line 345 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 25:
#line 347 "CxxParser.y"
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 30:
#line 360 "CxxParser.y"
{ yyval.built_in_id = YACC_BUILT_IN_IDS(yyvsp[-1].built_in_id, yyvsp[0].built_in_id); ;
    break;}
case 31:
#line 361 "CxxParser.y"
{ yyval.name = YACC_PSEUDO_DESTRUCTOR_ID(yyvsp[-3].built_in_id, yyvsp[0].built_in_id); ;
    break;}
case 32:
#line 362 "CxxParser.y"
{ yyval.name = YACC_PSEUDO_DESTRUCTOR_ID(0, yyvsp[0].built_in_id); ;
    break;}
case 33:
#line 363 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 35:
#line 365 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 37:
#line 367 "CxxParser.y"
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 38:
#line 378 "CxxParser.y"
{ yyval.strings = yyvsp[0].string_literal; ;
    break;}
case 39:
#line 381 "CxxParser.y"
{ yyval.expression = YACC_INTEGER_LITERAL_EXPRESSION(yyvsp[0].integer_literal); ;
    break;}
case 40:
#line 382 "CxxParser.y"
{ yyval.expression = YACC_CHARACTER_LITERAL_EXPRESSION(yyvsp[0].character_literal); ;
    break;}
case 41:
#line 383 "CxxParser.y"
{ yyval.expression = YACC_FLOATING_LITERAL_EXPRESSION(yyvsp[0].floating_literal); ;
    break;}
case 42:
#line 384 "CxxParser.y"
{ yyval.expression = YACC_STRING_LITERAL_EXPRESSION(yyvsp[0].strings); ;
    break;}
case 44:
#line 386 "CxxParser.y"
{ yyval.expression = YACC_FALSE_EXPRESSION(); ;
    break;}
case 45:
#line 387 "CxxParser.y"
{ yyval.expression = YACC_TRUE_EXPRESSION(); ;
    break;}
case 46:
#line 392 "CxxParser.y"
{ YACC_RESULT(yyvsp[0].declarations); ;
    break;}
case 48:
#line 425 "CxxParser.y"
{ yyval.expression = YACC_THIS_EXPRESSION(); ;
    break;}
case 49:
#line 426 "CxxParser.y"
{ yyval.expression = yyvsp[0].name; ;
    break;}
case 51:
#line 436 "CxxParser.y"
{ yyval.expression = YACC_ABSTRACT_FUNCTION_EXPRESSION(yyvsp[0].parenthesised); ;
    break;}
case 52:
#line 437 "CxxParser.y"
{ yyval.expression = YACC_ABSTRACT_ARRAY_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 53:
#line 438 "CxxParser.y"
{ yyval.expression = YACC_SET_TEMPLATE_EXPRESSION(YACC_ABSTRACT_FUNCTION_EXPRESSION(yyvsp[0].parenthesised)); ;
    break;}
case 54:
#line 445 "CxxParser.y"
{ yyval.type1_parameters = YACC_TYPE1_PARAMETERS(0, yyvsp[-1].parameters); ;
    break;}
case 55:
#line 446 "CxxParser.y"
{ yyval.type1_parameters = YACC_TYPE1_PARAMETERS(yyvsp[-2].type1_parameters, yyvsp[-1].parameters); ;
    break;}
case 56:
#line 447 "CxxParser.y"
{ yyval.mark = mark_type1(); yyclearin; ;
    break;}
case 58:
#line 450 "CxxParser.y"
{ yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-3].expression, yyvsp[-2].parenthesised); ;
    break;}
case 59:
#line 452 "CxxParser.y"
{ yyerrok; yyclearin; remark_type1(yyvsp[-2].mark); unmark(); unmark(yyvsp[-3].type1_parameters); yyval.expression = YACC_TYPE1_EXPRESSION(yyvsp[-7].expression, yyvsp[-6].parenthesised, yyvsp[-3].type1_parameters); ;
    break;}
case 60:
#line 454 "CxxParser.y"
{ yyerrok; yyclearin; remark_type1(yyvsp[-4].mark); unmark(); unmark(); yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-6].expression, yyvsp[-5].parenthesised); ;
    break;}
case 61:
#line 456 "CxxParser.y"
{ yyerrok; yyclearin; remark_type1(yyvsp[-2].mark); unmark(); yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-4].expression, yyvsp[-3].parenthesised); ;
    break;}
case 62:
#line 457 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 63:
#line 461 "CxxParser.y"
{ yyval.expression = YACC_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 64:
#line 463 "CxxParser.y"
{ yyval.expression = YACC_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 65:
#line 464 "CxxParser.y"
{ yyval.expression = YACC_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 66:
#line 466 "CxxParser.y"
{ yyval.expression = YACC_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 67:
#line 467 "CxxParser.y"
{ yyval.expression = YACC_POST_INCREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 68:
#line 468 "CxxParser.y"
{ yyval.expression = YACC_POST_DECREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 69:
#line 469 "CxxParser.y"
{ yyval.expression = YACC_DYNAMIC_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 70:
#line 470 "CxxParser.y"
{ yyval.expression = YACC_STATIC_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 71:
#line 471 "CxxParser.y"
{ yyval.expression = YACC_REINTERPRET_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 72:
#line 472 "CxxParser.y"
{ yyval.expression = YACC_CONST_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 73:
#line 473 "CxxParser.y"
{ yyval.expression = YACC_TYPEID_EXPRESSION(yyvsp[0].parameters); ;
    break;}
case 74:
#line 476 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, 0); ;
    break;}
case 76:
#line 478 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 77:
#line 479 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 79:
#line 482 "CxxParser.y"
{ yyval.expression = YACC_PRE_INCREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 80:
#line 483 "CxxParser.y"
{ yyval.expression = YACC_PRE_DECREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 81:
#line 484 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 82:
#line 490 "CxxParser.y"
{ yyval.expression = YACC_SCOPED_POINTER_EXPRESSION(yyvsp[-2].name, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 83:
#line 491 "CxxParser.y"
{ yyval.expression = YACC_PLUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 84:
#line 492 "CxxParser.y"
{ yyval.expression = YACC_MINUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 85:
#line 493 "CxxParser.y"
{ yyval.expression = YACC_NOT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 86:
#line 494 "CxxParser.y"
{ yyval.expression = YACC_COMPLEMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 87:
#line 495 "CxxParser.y"
{ yyval.expression = YACC_SIZEOF_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 88:
#line 497 "CxxParser.y"
{ yyval.expression = yyvsp[0].new_expression; ;
    break;}
case 89:
#line 498 "CxxParser.y"
{ yyval.expression = YACC_GLOBAL_EXPRESSION(yyvsp[-1].is_template, yyvsp[0].new_expression); ;
    break;}
case 90:
#line 499 "CxxParser.y"
{ yyval.expression = yyvsp[0].delete_expression; ;
    break;}
case 91:
#line 500 "CxxParser.y"
{ yyval.expression = YACC_GLOBAL_EXPRESSION(yyvsp[-1].is_template, yyvsp[0].delete_expression); ;
    break;}
case 92:
#line 505 "CxxParser.y"
{ yyval.delete_expression = YACC_DELETE_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 93:
#line 506 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_TYPE_ID_EXPRESSION(0, yyvsp[-1].expression, yyvsp[0].expressions); ;
    break;}
case 94:
#line 507 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_TYPE_ID_EXPRESSION(yyvsp[-2].parameters, yyvsp[-1].expression, yyvsp[0].expressions); ;
    break;}
case 95:
#line 508 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_EXPRESSION(yyvsp[0].parameters, 0, 0); ;
    break;}
case 96:
#line 510 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_EXPRESSION(yyvsp[-2].parameters, yyvsp[-1].parameters, yyvsp[0].expressions); ;
    break;}
case 97:
#line 514 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 98:
#line 515 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 99:
#line 516 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 100:
#line 517 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 102:
#line 519 "CxxParser.y"
{ yyval.expression = YACC_ABSTRACT_ARRAY_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 103:
#line 520 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 104:
#line 521 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, 0); ;
    break;}
case 105:
#line 522 "CxxParser.y"
{ yyval.expressions = yyvsp[-1].expressions; ;
    break;}
case 107:
#line 528 "CxxParser.y"
{ yyval.expression = YACC_CAST_EXPRESSION(yyvsp[-1].expression, yyvsp[0].expression); ;
    break;}
case 109:
#line 532 "CxxParser.y"
{ yyval.expression = YACC_DOT_STAR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 110:
#line 533 "CxxParser.y"
{ yyval.expression = YACC_ARROW_STAR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 112:
#line 535 "CxxParser.y"
{ yyval.expression = YACC_MULTIPLY_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 113:
#line 536 "CxxParser.y"
{ yyval.expression = YACC_DIVIDE_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 114:
#line 537 "CxxParser.y"
{ yyval.expression = YACC_MODULUS_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 116:
#line 539 "CxxParser.y"
{ yyval.expression = YACC_ADD_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 117:
#line 540 "CxxParser.y"
{ yyval.expression = YACC_SUBTRACT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 119:
#line 542 "CxxParser.y"
{ yyval.expression = YACC_SHIFT_LEFT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 120:
#line 543 "CxxParser.y"
{ yyval.expression = YACC_SHIFT_RIGHT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 122:
#line 545 "CxxParser.y"
{ yyval.expression = YACC_LESS_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 123:
#line 546 "CxxParser.y"
{ yyval.expression = YACC_GREATER_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 124:
#line 547 "CxxParser.y"
{ yyval.expression = YACC_LESS_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 125:
#line 548 "CxxParser.y"
{ yyval.expression = YACC_GREATER_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 127:
#line 550 "CxxParser.y"
{ yyval.expression = YACC_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 128:
#line 551 "CxxParser.y"
{ yyval.expression = YACC_NOT_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 130:
#line 553 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 132:
#line 555 "CxxParser.y"
{ yyval.expression = YACC_EXCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 134:
#line 557 "CxxParser.y"
{ yyval.expression = YACC_INCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 136:
#line 559 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 138:
#line 561 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 140:
#line 564 "CxxParser.y"
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 142:
#line 570 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 143:
#line 571 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].initializer_clause); ;
    break;}
case 156:
#line 578 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 159:
#line 581 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression)); ;
    break;}
case 162:
#line 587 "CxxParser.y"
{ yyval.expression = YACC_LESS_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 163:
#line 588 "CxxParser.y"
{ yyval.expression = YACC_LESS_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 164:
#line 589 "CxxParser.y"
{ yyval.expression = YACC_GREATER_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 166:
#line 591 "CxxParser.y"
{ yyval.expression = YACC_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 167:
#line 592 "CxxParser.y"
{ yyval.expression = YACC_NOT_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 169:
#line 594 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 171:
#line 597 "CxxParser.y"
{ yyval.expression = YACC_EXCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 173:
#line 600 "CxxParser.y"
{ yyval.expression = YACC_INCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 175:
#line 603 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 177:
#line 606 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 179:
#line 609 "CxxParser.y"
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 181:
#line 612 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 184:
#line 616 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression)); ;
    break;}
case 185:
#line 617 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 186:
#line 618 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 187:
#line 625 "CxxParser.y"
{ yyval.statement = YACC_LINED_STATEMENT(yyvsp[0].statement, yyvsp[-1].line); end_search(yyval.statement); ;
    break;}
case 189:
#line 627 "CxxParser.y"
{ yyval.statement = yyvsp[0].statement; ;
    break;}
case 190:
#line 628 "CxxParser.y"
{ yyval.statement = 0; ;
    break;}
case 194:
#line 633 "CxxParser.y"
{ yyval.statement = YACC_TRY_BLOCK_STATEMENT(yyvsp[0].function_body); ;
    break;}
case 199:
#line 638 "CxxParser.y"
{ yyval.statement = YACC_LABEL_STATEMENT(yyvsp[-2].name, yyvsp[0].statement); ;
    break;}
case 200:
#line 639 "CxxParser.y"
{ yyval.statement = YACC_CASE_STATEMENT(yyvsp[-2].expression, yyvsp[0].statement); ;
    break;}
case 201:
#line 640 "CxxParser.y"
{ yyval.statement = YACC_DEFAULT_STATEMENT(yyvsp[0].statement); ;
    break;}
case 202:
#line 642 "CxxParser.y"
{ yyval.statement = YACC_COMPOUND_STATEMENT(yyvsp[-1].statements); ;
    break;}
case 203:
#line 643 "CxxParser.y"
{ yyval.statement = yyvsp[-5].statements; YACC_UNBANG(yyvsp[-2].bang, "Bad statement-seq."); ;
    break;}
case 204:
#line 644 "CxxParser.y"
{ yyval.statements = YACC_STATEMENTS(0, 0); ;
    break;}
case 205:
#line 645 "CxxParser.y"
{ yyval.statements = YACC_STATEMENTS(yyvsp[-1].statements, YACC_COMPILE_STATEMENT(yyvsp[0].statement)); ;
    break;}
case 206:
#line 646 "CxxParser.y"
{ yyval.statements = yyvsp[-5].statements; YACC_UNBANG(yyvsp[-2].bang, "Bad statement."); ;
    break;}
case 207:
#line 650 "CxxParser.y"
{ yyval.statement = YACC_IF_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement, 0); ;
    break;}
case 208:
#line 651 "CxxParser.y"
{ yyval.statement = YACC_IF_STATEMENT(yyvsp[-4].condition, yyvsp[-2].statement, yyvsp[0].statement); ;
    break;}
case 209:
#line 652 "CxxParser.y"
{ yyval.statement = YACC_SWITCH_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement); ;
    break;}
case 210:
#line 653 "CxxParser.y"
{ yyval.condition = YACC_CONDITION(0); ;
    break;}
case 212:
#line 655 "CxxParser.y"
{ yyval.condition = YACC_CONDITION(yyvsp[0].parameters); ;
    break;}
case 213:
#line 658 "CxxParser.y"
{ yyval.statement = YACC_WHILE_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement); ;
    break;}
case 214:
#line 659 "CxxParser.y"
{ yyval.statement = YACC_DO_WHILE_STATEMENT(yyvsp[-5].statement, yyvsp[-2].expression); ;
    break;}
case 215:
#line 661 "CxxParser.y"
{ yyval.statement = YACC_FOR_STATEMENT(yyvsp[-5].expression, yyvsp[-4].condition, yyvsp[-2].expression, yyvsp[0].statement); ;
    break;}
case 217:
#line 664 "CxxParser.y"
{ yyval.statement = YACC_BREAK_STATEMENT(); ;
    break;}
case 218:
#line 665 "CxxParser.y"
{ yyval.statement = YACC_CONTINUE_STATEMENT(); ;
    break;}
case 219:
#line 666 "CxxParser.y"
{ yyval.statement = YACC_RETURN_STATEMENT(yyvsp[-1].expression); ;
    break;}
case 220:
#line 667 "CxxParser.y"
{ yyval.statement = YACC_GOTO_STATEMENT(yyvsp[-1].name); ;
    break;}
case 221:
#line 668 "CxxParser.y"
{ yyval.statement = YACC_DECLARATION_STATEMENT(yyvsp[0].declaration); ;
    break;}
case 222:
#line 673 "CxxParser.y"
{ yyval.declarations = yyvsp[-1].declarations; unnest(yyvsp[-2].nest); ;
    break;}
case 223:
#line 675 "CxxParser.y"
{ yyval.declarations = yyvsp[-6].declarations; unnest(yyvsp[-7].nest); YACC_UNBANG(yyvsp[-2].bang, "Bad declaration-seq."); ;
    break;}
case 224:
#line 676 "CxxParser.y"
{ yyval.declarations = YACC_DECLARATIONS(0, 0); ;
    break;}
case 225:
#line 677 "CxxParser.y"
{ yyval.declarations = YACC_DECLARATIONS(yyvsp[-2].declarations, YACC_COMPILE_DECLARATION(yyvsp[-1].utility, yyvsp[0].declaration)); ;
    break;}
case 226:
#line 678 "CxxParser.y"
{ yyval.declarations = yyvsp[-6].declarations; YACC_UNBANG(yyvsp[-2].bang, "Bad declaration."); ;
    break;}
case 227:
#line 679 "CxxParser.y"
{ yyval.declaration = YACC_LINED_DECLARATION(yyvsp[0].declaration, yyvsp[-1].line); end_search(yyval.declaration); ;
    break;}
case 229:
#line 681 "CxxParser.y"
{ yyval.declaration = yyvsp[0].declaration; ;
    break;}
case 230:
#line 682 "CxxParser.y"
{ yyval.declaration = 0; ;
    break;}
case 232:
#line 684 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 236:
#line 689 "CxxParser.y"
{ yyval.declaration = YACC_LINKAGE_SPECIFICATION(yyvsp[0].name); ;
    break;}
case 237:
#line 690 "CxxParser.y"
{ yyval.declaration = YACC_NAMESPACE_DECLARATION(yyvsp[0].name); ;
    break;}
case 238:
#line 691 "CxxParser.y"
{ yyval.declaration = YACC_SET_TEMPLATE_DECLARATION(yyvsp[0].declaration); ;
    break;}
case 239:
#line 692 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 245:
#line 698 "CxxParser.y"
{ yyval.declaration = YACC_SET_TEMPLATE_DECLARATION(yyvsp[0].declaration); ;
    break;}
case 246:
#line 699 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 248:
#line 701 "CxxParser.y"
{ yyval.expression = yyvsp[-1].expressions; ;
    break;}
case 249:
#line 702 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 250:
#line 717 "CxxParser.y"
{ yyval.name = yyvsp[0].built_in_id; ;
    break;}
case 251:
#line 718 "CxxParser.y"
{ yyval.name = YACC_BUILT_IN_NAME(yyvsp[-1].name, yyvsp[0].built_in_id); ;
    break;}
case 252:
#line 719 "CxxParser.y"
{ yyval.name = YACC_DECL_SPECIFIER_NAME(yyvsp[-1].name, yyvsp[0].decl_specifier_id); ;
    break;}
case 253:
#line 720 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 254:
#line 721 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_NAME(yyvsp[0].name); ;
    break;}
case 255:
#line 722 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 256:
#line 723 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 257:
#line 724 "CxxParser.y"
{ yyval.name = YACC_DECL_SPECIFIER_NAME(yyvsp[-1].name, yyvsp[0].decl_specifier_id); ;
    break;}
case 258:
#line 725 "CxxParser.y"
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[0].name); ;
    break;}
case 259:
#line 726 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 261:
#line 728 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 262:
#line 729 "CxxParser.y"
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[0].name); ;
    break;}
case 264:
#line 731 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 266:
#line 733 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 269:
#line 736 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-2].name, yyvsp[-1].name); ;
    break;}
case 270:
#line 737 "CxxParser.y"
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[-1].name); ;
    break;}
case 275:
#line 743 "CxxParser.y"
{ yyval.decl_specifier_id = yyvsp[0].cv_qualifiers; ;
    break;}
case 278:
#line 748 "CxxParser.y"
{ yyval.decl_specifier_id = YACC_SET_TEMPLATE_DECL_SPECIFIER(yyvsp[0].decl_specifier_id); ;
    break;}
case 295:
#line 767 "CxxParser.y"
{ yyval.name = YACC_CV_DECL_SPECIFIER(yyvsp[0].cv_qualifiers); ;
    break;}
case 299:
#line 772 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 301:
#line 774 "CxxParser.y"
{ yyval.name = YACC_BUILT_IN_ID_ID(yyvsp[0].built_in_id); ;
    break;}
case 317:
#line 788 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 318:
#line 790 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 319:
#line 791 "CxxParser.y"
{ yyval.name = YACC_ENUM_SPECIFIER_ID(yyvsp[-1].name, yyvsp[0].enumerators); ;
    break;}
case 320:
#line 792 "CxxParser.y"
{ yyval.name = YACC_ENUM_SPECIFIER_ID(0, yyvsp[0].enumerators); ;
    break;}
case 321:
#line 793 "CxxParser.y"
{ yyval.enumerators = YACC_ENUMERATORS(0, 0); ;
    break;}
case 322:
#line 794 "CxxParser.y"
{ yyval.enumerators = yyvsp[-1].enumerators; ;
    break;}
case 323:
#line 795 "CxxParser.y"
{ yyval.enumerators = yyvsp[-2].enumerators; ;
    break;}
case 324:
#line 796 "CxxParser.y"
{ ;
    break;}
case 325:
#line 797 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad enumerator-list."); ;
    break;}
case 326:
#line 798 "CxxParser.y"
{ ;
    break;}
case 327:
#line 799 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad enumerator-definition."); ;
    break;}
case 329:
#line 801 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad enumerator-definition."); ;
    break;}
case 330:
#line 802 "CxxParser.y"
{ yyval.enumerators = YACC_ENUMERATORS(0, 0); ;
    break;}
case 332:
#line 804 "CxxParser.y"
{ yyval.enumerators = YACC_ENUMERATORS(yyvsp[-1].enumerators, yyvsp[0].enumerator); ;
    break;}
case 333:
#line 805 "CxxParser.y"
{ yyval.enumerator = YACC_ENUMERATOR(yyvsp[0].name, 0); ;
    break;}
case 334:
#line 806 "CxxParser.y"
{ yyval.enumerator = YACC_ENUMERATOR(yyvsp[-2].name, yyvsp[0].expression); ;
    break;}
case 336:
#line 809 "CxxParser.y"
{ yyval.name = YACC_NAMESPACE_DEFINITION(yyvsp[-1].name, yyvsp[0].declarations); ;
    break;}
case 337:
#line 810 "CxxParser.y"
{ yyval.name = YACC_NAMESPACE_DEFINITION(0, yyvsp[0].declarations); ;
    break;}
case 338:
#line 811 "CxxParser.y"
{ yyval.declaration = YACC_NAMESPACE_ALIAS_DEFINITION(yyvsp[-3].name, yyvsp[-1].name); ;
    break;}
case 339:
#line 813 "CxxParser.y"
{ yyval.declaration = YACC_USING_DECLARATION(false, yyvsp[-1].name); ;
    break;}
case 340:
#line 814 "CxxParser.y"
{ yyval.declaration = YACC_USING_DECLARATION(true, yyvsp[-1].name); ;
    break;}
case 341:
#line 816 "CxxParser.y"
{ yyval.declaration = YACC_USING_DIRECTIVE(yyvsp[-1].name); ;
    break;}
case 342:
#line 817 "CxxParser.y"
{ yyval.declaration = YACC_ASM_DEFINITION(yyvsp[-2].strings); ;
    break;}
case 343:
#line 818 "CxxParser.y"
{ yyval.name = YACC_LINKAGE_SPECIFIER(yyvsp[-1].strings, yyvsp[0].declaration); ;
    break;}
case 344:
#line 819 "CxxParser.y"
{ yyval.name = YACC_LINKAGE_SPECIFIER(yyvsp[-1].strings, yyvsp[0].declarations); ;
    break;}
case 345:
#line 825 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, yyvsp[-2].expression), yyvsp[0].expression); ;
    break;}
case 346:
#line 826 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 348:
#line 834 "CxxParser.y"
{ yyval.pointer_declarator = YACC_POINTER_DECLARATOR(); ;
    break;}
case 349:
#line 835 "CxxParser.y"
{ yyval.pointer_declarator = YACC_CV_DECLARATOR(yyvsp[-1].pointer_declarator, yyvsp[0].cv_qualifiers); ;
    break;}
case 350:
#line 836 "CxxParser.y"
{ yyval.declarator = yyvsp[0].pointer_declarator; ;
    break;}
case 351:
#line 837 "CxxParser.y"
{ yyval.declarator = YACC_NESTED_DECLARATOR(yyvsp[-1].name, yyvsp[0].declarator); ;
    break;}
case 352:
#line 838 "CxxParser.y"
{ yyval.declarator = YACC_REFERENCE_DECLARATOR(); ;
    break;}
case 353:
#line 839 "CxxParser.y"
{ yyval.declarator = yyvsp[0].declarator; ;
    break;}
case 354:
#line 840 "CxxParser.y"
{ yyval.declarator = YACC_GLOBAL_DECLARATOR(yyvsp[-1].is_template, yyvsp[0].declarator); ;
    break;}
case 355:
#line 841 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[0].declarator, YACC_EPSILON()); ;
    break;}
case 356:
#line 842 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 357:
#line 844 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 358:
#line 845 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 359:
#line 847 "CxxParser.y"
{ yyval.cv_qualifiers = YACC_CV_QUALIFIERS(0, 0); ;
    break;}
case 360:
#line 848 "CxxParser.y"
{ yyval.cv_qualifiers = YACC_CV_QUALIFIERS(yyvsp[-1].cv_qualifiers, yyvsp[0].cv_qualifiers); ;
    break;}
case 363:
#line 852 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 364:
#line 853 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 365:
#line 856 "CxxParser.y"
{ yyval.expression = YACC_EPSILON(); ;
    break;}
case 366:
#line 857 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 368:
#line 859 "CxxParser.y"
{ yyval.expression = YACC_EPSILON(); ;
    break;}
case 370:
#line 861 "CxxParser.y"
{ yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-1].expression, yyvsp[0].parenthesised); ;
    break;}
case 371:
#line 862 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-2].expression, 0); ;
    break;}
case 372:
#line 863 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 373:
#line 866 "CxxParser.y"
{ yyval.parenthesised = YACC_PARENTHESISED(yyvsp[-1].parameters, yyvsp[0].cv_qualifiers, 0); ;
    break;}
case 374:
#line 867 "CxxParser.y"
{ yyval.parenthesised = YACC_PARENTHESISED(yyvsp[-2].parameters, yyvsp[-1].cv_qualifiers, yyvsp[0].exception_specification); ;
    break;}
case 375:
#line 868 "CxxParser.y"
{ yyval.parameters = yyvsp[-1].parameters; ;
    break;}
case 376:
#line 870 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(0, 0); ;
    break;}
case 378:
#line 872 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(yyvsp[-1].parameters, YACC_ELLIPSIS_EXPRESSION()); ;
    break;}
case 379:
#line 873 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(0, yyvsp[0].parameter); ;
    break;}
case 380:
#line 874 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(yyvsp[-2].parameters, yyvsp[0].parameter); ;
    break;}
case 382:
#line 882 "CxxParser.y"
{ yyval.expression = YACC_MULTIPLY_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 384:
#line 884 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-1].expression, YACC_EPSILON()); ;
    break;}
case 385:
#line 885 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 387:
#line 887 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 388:
#line 888 "CxxParser.y"
{ yyval.expression = YACC_ELLIPSIS_EXPRESSION(); ;
    break;}
case 389:
#line 889 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 390:
#line 890 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 391:
#line 891 "CxxParser.y"
{ yyval.parameter = YACC_DECL_SPECIFIER_PARAMETER(yyvsp[0].parameter, yyvsp[-1].decl_specifier_id); ;
    break;}
case 392:
#line 895 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 393:
#line 896 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 394:
#line 898 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression)); ;
    break;}
case 395:
#line 899 "CxxParser.y"
{ yyval.parameter = YACC_DECL_SPECIFIER_PARAMETER(yyvsp[0].parameter, yyvsp[-1].decl_specifier_id); ;
    break;}
case 397:
#line 901 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-1].expression, 0); ;
    break;}
case 398:
#line 902 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 401:
#line 910 "CxxParser.y"
{ yyval.expression = YACC_FUNCTION_DEFINITION(yyvsp[-1].expression, yyvsp[0].function_body); ;
    break;}
case 402:
#line 911 "CxxParser.y"
{ yyval.expression = YACC_FUNCTION_DEFINITION(yyvsp[-1].expression, yyvsp[0].function_body); ;
    break;}
case 403:
#line 912 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 404:
#line 913 "CxxParser.y"
{ yyval.expression = YACC_CTOR_DEFINITION(yyvsp[-1].expressions, yyvsp[0].function_body); ;
    break;}
case 405:
#line 914 "CxxParser.y"
{ yyval.expression = YACC_CTOR_DEFINITION(yyvsp[-1].expressions, yyvsp[0].function_body); ;
    break;}
case 406:
#line 915 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 407:
#line 916 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 408:
#line 917 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 409:
#line 918 "CxxParser.y"
{ yyval.function_body = YACC_TRY_FUNCTION_BLOCK(yyvsp[-1].function_body, yyvsp[0].handlers); ;
    break;}
case 410:
#line 919 "CxxParser.y"
{ yyval.function_body = YACC_CTOR_FUNCTION_BLOCK(yyvsp[0].function_body, yyvsp[-1].mem_initializers); ;
    break;}
case 411:
#line 920 "CxxParser.y"
{ yyval.function_body = YACC_FUNCTION_BLOCK(yyvsp[0].statement); ;
    break;}
case 412:
#line 927 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_EXPRESSION_CLAUSE(yyvsp[0].expression); ;
    break;}
case 414:
#line 929 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(yyvsp[-1].initializer_clauses); ;
    break;}
case 415:
#line 930 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(yyvsp[-2].initializer_clauses); ;
    break;}
case 416:
#line 931 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(0); ;
    break;}
case 417:
#line 932 "CxxParser.y"
{ yyval.initializer_clause = 0; YACC_UNBANG(yyvsp[-2].bang, "Bad initializer_clause."); ;
    break;}
case 418:
#line 934 "CxxParser.y"
{ yyval.initializer_clause = yyvsp[-6].initializer_clauses; YACC_UNBANG(yyvsp[-2].bang, "Bad initializer_clause."); ;
    break;}
case 419:
#line 935 "CxxParser.y"
{ yyval.initializer_clauses = YACC_INITIALIZER_CLAUSES(0, yyvsp[0].initializer_clause); ;
    break;}
case 420:
#line 936 "CxxParser.y"
{ yyval.initializer_clauses = YACC_INITIALIZER_CLAUSES(yyvsp[-2].initializer_clauses, yyvsp[0].initializer_clause); ;
    break;}
case 421:
#line 937 "CxxParser.y"
{ yyval.initializer_clause = yyvsp[0].initializer_clause; end_search(yyval.initializer_clause); ;
    break;}
case 423:
#line 939 "CxxParser.y"
{ yyval.initializer_clause = yyvsp[0].initializer_clause; ;
    break;}
case 424:
#line 940 "CxxParser.y"
{ yyval.initializer_clause = 0; ;
    break;}
case 425:
#line 955 "CxxParser.y"
{ yyval.mark = mark(); ;
    break;}
case 426:
#line 956 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 427:
#line 957 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-3].class_key, yyvsp[-2].name); rewind_colon(yyvsp[-1].mark, yyval.name); ;
    break;}
case 428:
#line 958 "CxxParser.y"
{ unmark(yyvsp[-1].base_specifiers); yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-4].class_key, yyvsp[-3].name, yyvsp[-1].base_specifiers); ;
    break;}
case 429:
#line 959 "CxxParser.y"
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-3].class_key, 0, yyvsp[-1].base_specifiers); ;
    break;}
case 430:
#line 960 "CxxParser.y"
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-2].class_key, yyvsp[-1].name, 0); ;
    break;}
case 431:
#line 961 "CxxParser.y"
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-1].class_key, 0, 0); ;
    break;}
case 435:
#line 963 "CxxParser.y"
{ yyval.name = YACC_CLASS_MEMBERS(yyvsp[-2]._class, yyvsp[-1].declarations); ;
    break;}
case 436:
#line 965 "CxxParser.y"
{ yyval.name = YACC_CLASS_MEMBERS(yyvsp[-7]._class, yyvsp[-6].declarations); YACC_UNBANG(yyvsp[-2].bang, "Bad member_specification.opt."); ;
    break;}
case 437:
#line 966 "CxxParser.y"
{ yyval.declarations = YACC_MEMBER_DECLARATIONS(0, 0); ;
    break;}
case 438:
#line 967 "CxxParser.y"
{ yyval.declarations = YACC_MEMBER_DECLARATIONS(yyvsp[-2].declarations, YACC_COMPILE_DECLARATION(yyvsp[-1].utility, yyvsp[0].declaration)); ;
    break;}
case 439:
#line 969 "CxxParser.y"
{ yyval.declarations = yyvsp[-6].declarations; YACC_UNBANG(yyvsp[-2].bang, "Bad member-declaration."); ;
    break;}
case 440:
#line 970 "CxxParser.y"
{ yyval.declaration = YACC_LINED_DECLARATION(yyvsp[0].declaration, yyvsp[-1].line); end_search(yyval.declaration); ;
    break;}
case 442:
#line 972 "CxxParser.y"
{ yyval.declaration = yyvsp[0].declaration; ;
    break;}
case 443:
#line 973 "CxxParser.y"
{ yyval.declaration = 0; ;
    break;}
case 445:
#line 975 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 446:
#line 976 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 449:
#line 987 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 451:
#line 989 "CxxParser.y"
{ yyval.expression = yyvsp[-1].expressions; ;
    break;}
case 452:
#line 990 "CxxParser.y"
{ yyval.expression = yyvsp[-1].expressions; ;
    break;}
case 453:
#line 991 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 454:
#line 992 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, yyvsp[-2].expression), yyvsp[0].expression); ;
    break;}
case 455:
#line 993 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 456:
#line 994 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 459:
#line 999 "CxxParser.y"
{ yyval.declaration = YACC_ACCESSIBILITY_SPECIFIER(yyvsp[-1].access_specifier); ;
    break;}
case 460:
#line 1000 "CxxParser.y"
{ yyval.expression = YACC_BIT_FIELD_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 461:
#line 1001 "CxxParser.y"
{ yyval.expression = YACC_BIT_FIELD_EXPRESSION(0, yyvsp[0].expression); ;
    break;}
case 463:
#line 1004 "CxxParser.y"
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 465:
#line 1006 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].initializer_clause); ;
    break;}
case 466:
#line 1012 "CxxParser.y"
{ yyval.base_specifiers = YACC_BASE_SPECIFIERS(0, yyvsp[0].base_specifier); ;
    break;}
case 467:
#line 1013 "CxxParser.y"
{ yyval.base_specifiers = YACC_BASE_SPECIFIERS(yyvsp[-2].base_specifiers, yyvsp[0].base_specifier); ;
    break;}
case 468:
#line 1014 "CxxParser.y"
{ yyval.base_specifier = YACC_BASE_SPECIFIER(yyvsp[0].name); ;
    break;}
case 469:
#line 1015 "CxxParser.y"
{ yyval.base_specifier = YACC_ACCESS_BASE_SPECIFIER(yyvsp[0].base_specifier, yyvsp[-1].access_specifier); ;
    break;}
case 470:
#line 1016 "CxxParser.y"
{ yyval.base_specifier = YACC_VIRTUAL_BASE_SPECIFIER(yyvsp[0].base_specifier); ;
    break;}
case 474:
#line 1022 "CxxParser.y"
{ yyval.name = YACC_CONVERSION_FUNCTION_ID(yyvsp[0].expression); ;
    break;}
case 475:
#line 1023 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 476:
#line 1024 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 477:
#line 1032 "CxxParser.y"
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(0, 0); ;
    break;}
case 479:
#line 1034 "CxxParser.y"
{ yyval.mem_initializers = yyvsp[0].mem_initializers; ;
    break;}
case 480:
#line 1035 "CxxParser.y"
{ yyval.mem_initializers = yyvsp[-2].mem_initializers; YACC_UNBANG(yyvsp[-1].bang, "Bad ctor-initializer."); ;
    break;}
case 481:
#line 1036 "CxxParser.y"
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(0, yyvsp[0].mem_initializer); ;
    break;}
case 482:
#line 1037 "CxxParser.y"
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(yyvsp[-1].mem_initializers, yyvsp[0].mem_initializer); ;
    break;}
case 484:
#line 1039 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad mem-initializer."); ;
    break;}
case 485:
#line 1040 "CxxParser.y"
{ yyval.mem_initializer = YACC_MEM_INITIALIZER(yyvsp[-3].name, yyvsp[-1].expressions); ;
    break;}
case 487:
#line 1046 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_FUNCTION_ID(yyvsp[0].name); ;
    break;}
case 488:
#line 1056 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_NEW_ID(); ;
    break;}
case 489:
#line 1057 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_DELETE_ID(); ;
    break;}
case 490:
#line 1062 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ADD_ID(); ;
    break;}
case 491:
#line 1063 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_SUB_ID(); ;
    break;}
case 492:
#line 1064 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_MUL_ID(); ;
    break;}
case 493:
#line 1065 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_DIV_ID(); ;
    break;}
case 494:
#line 1066 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_MOD_ID(); ;
    break;}
case 495:
#line 1067 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_XOR_ID(); ;
    break;}
case 496:
#line 1068 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_BIT_AND_ID(); ;
    break;}
case 497:
#line 1069 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_BIT_OR_ID(); ;
    break;}
case 498:
#line 1070 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_BIT_NOT_ID(); ;
    break;}
case 499:
#line 1071 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LOG_NOT_ID(); ;
    break;}
case 500:
#line 1072 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_ID(); ;
    break;}
case 501:
#line 1073 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LT_ID(); ;
    break;}
case 502:
#line 1074 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_GT_ID(); ;
    break;}
case 503:
#line 1075 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_ADD_ID(); ;
    break;}
case 504:
#line 1076 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_SUB_ID(); ;
    break;}
case 505:
#line 1077 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_MUL_ID(); ;
    break;}
case 506:
#line 1078 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_DIV_ID(); ;
    break;}
case 507:
#line 1079 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_MOD_ID(); ;
    break;}
case 508:
#line 1080 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_XOR_ID(); ;
    break;}
case 509:
#line 1081 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_BIT_AND_ID(); ;
    break;}
case 510:
#line 1082 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_BIT_OR_ID(); ;
    break;}
case 511:
#line 1083 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_SHL_ID(); ;
    break;}
case 512:
#line 1084 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_SHR_ID(); ;
    break;}
case 513:
#line 1085 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_SHR_ID(); ;
    break;}
case 514:
#line 1086 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_SHL_ID(); ;
    break;}
case 515:
#line 1087 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_EQ_ID(); ;
    break;}
case 516:
#line 1088 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_NE_ID(); ;
    break;}
case 517:
#line 1089 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LE_ID(); ;
    break;}
case 518:
#line 1090 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_GE_ID(); ;
    break;}
case 519:
#line 1091 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LOG_AND_ID(); ;
    break;}
case 520:
#line 1092 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LOG_OR_ID(); ;
    break;}
case 521:
#line 1093 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_INC_ID(); ;
    break;}
case 522:
#line 1094 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_DEC_ID(); ;
    break;}
case 523:
#line 1095 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_COMMA_ID(); ;
    break;}
case 524:
#line 1096 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ARROW_STAR_ID(); ;
    break;}
case 525:
#line 1097 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ARROW_ID(); ;
    break;}
case 526:
#line 1098 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_CALL_ID(); ;
    break;}
case 527:
#line 1099 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_INDEX_ID(); ;
    break;}
case 528:
#line 1104 "CxxParser.y"
{ yyval.declaration = YACC_TEMPLATE_DECLARATION(yyvsp[-1].template_parameters, yyvsp[0].declaration); ;
    break;}
case 529:
#line 1105 "CxxParser.y"
{ yyval.declaration = YACC_DECL_SPECIFIER_DECLARATION(yyvsp[0].declaration, yyvsp[-1].decl_specifier_id); ;
    break;}
case 530:
#line 1106 "CxxParser.y"
{ yyval.template_parameters = yyvsp[-1].template_parameters; ;
    break;}
case 531:
#line 1107 "CxxParser.y"
{ yyval.template_parameters = YACC_TEMPLATE_PARAMETERS(0, yyvsp[0].template_parameter); ;
    break;}
case 532:
#line 1108 "CxxParser.y"
{ yyval.template_parameters = YACC_TEMPLATE_PARAMETERS(yyvsp[-2].template_parameters, yyvsp[0].template_parameter); ;
    break;}
case 533:
#line 1109 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_SIMPLE_TYPE_PARAMETER(yyvsp[0].simple_type_parameter, 0); ;
    break;}
case 534:
#line 1110 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_SIMPLE_TYPE_PARAMETER(yyvsp[-2].simple_type_parameter, yyvsp[0].expression); ;
    break;}
case 535:
#line 1111 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_TEMPLATED_PARAMETER(yyvsp[0].templated_type_parameter, 0); ;
    break;}
case 536:
#line 1112 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_TEMPLATED_PARAMETER(yyvsp[-2].templated_type_parameter, yyvsp[0].name); ;
    break;}
case 537:
#line 1113 "CxxParser.y"
{ yyval.template_parameter = YACC_TEMPLATE_PARAMETER(yyvsp[0].parameter); ;
    break;}
case 538:
#line 1114 "CxxParser.y"
{ yyval.template_parameter = 0; YACC_UNBANG(yyvsp[-1].bang, "Bad template-parameter."); ;
    break;}
case 539:
#line 1115 "CxxParser.y"
{ yyval.simple_type_parameter = YACC_CLASS_TYPE_PARAMETER(0); ;
    break;}
case 540:
#line 1117 "CxxParser.y"
{ yyval.simple_type_parameter = YACC_TYPENAME_TYPE_PARAMETER(0); ;
    break;}
case 541:
#line 1119 "CxxParser.y"
{ yyval.templated_type_parameter = YACC_TEMPLATED_TYPE_PARAMETER(yyvsp[-1].template_parameters, 0); ;
    break;}
case 542:
#line 1120 "CxxParser.y"
{ yyval.templated_type_parameter = YACC_TEMPLATED_TYPE_PARAMETER(yyvsp[-2].template_parameters, yyvsp[0].name); ;
    break;}
case 543:
#line 1121 "CxxParser.y"
{ yyval.name = YACC_TEMPLATE_NAME(yyvsp[-3].name, yyvsp[-1].template_arguments); ;
    break;}
case 544:
#line 1122 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 545:
#line 1126 "CxxParser.y"
{ yyval.template_arguments = YACC_TEMPLATE_ARGUMENTS(0, yyvsp[0].template_argument); ;
    break;}
case 546:
#line 1127 "CxxParser.y"
{ yyval.template_arguments = YACC_TEMPLATE_ARGUMENTS(yyvsp[-2].template_arguments, yyvsp[0].template_argument); ;
    break;}
case 547:
#line 1128 "CxxParser.y"
{ yyval.template_argument = YACC_TEMPLATE_ARGUMENT(yyvsp[0].parameter); ;
    break;}
case 548:
#line 1138 "CxxParser.y"
{ yyval.declaration = YACC_EXPLICIT_SPECIALIZATION(yyvsp[0].declaration); ;
    break;}
case 549:
#line 1143 "CxxParser.y"
{ yyval.function_body = YACC_TRY_BLOCK(yyvsp[-1].statement, yyvsp[0].handlers); ;
    break;}
case 550:
#line 1145 "CxxParser.y"
{ yyval.handlers = YACC_HANDLERS(0, yyvsp[0].handler); ;
    break;}
case 551:
#line 1146 "CxxParser.y"
{ yyval.handlers = YACC_HANDLERS(yyvsp[0].handlers, yyvsp[-1].handler); ;
    break;}
case 552:
#line 1147 "CxxParser.y"
{ yyval.handler = YACC_HANDLER(yyvsp[-2].exception_declaration, yyvsp[0].statement); ;
    break;}
case 553:
#line 1148 "CxxParser.y"
{ yyval.exception_declaration = YACC_EXCEPTION_DECLARATION(yyvsp[0].parameter); ;
    break;}
case 554:
#line 1150 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(0); ;
    break;}
case 555:
#line 1151 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 556:
#line 1152 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(0); ;
    break;}
case 557:
#line 1153 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 558:
#line 1154 "CxxParser.y"
{ yyval.exception_specification = YACC_EXCEPTION_SPECIFICATION(0); ;
    break;}
case 559:
#line 1155 "CxxParser.y"
{ yyval.exception_specification = YACC_EXCEPTION_SPECIFICATION(yyvsp[-1].expressions); ;
    break;}
case 560:
#line 1156 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 561:
#line 1157 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 562:
#line 1162 "CxxParser.y"
{ yyerrok; yyclearin; advance_search(); ;
    break;}
case 563:
#line 1163 "CxxParser.y"
{ yyval.bang = YACC_BANG(); ;
    break;}
case 564:
#line 1164 "CxxParser.y"
{ yyval.mark = mark(); ;
    break;}
case 565:
#line 1165 "CxxParser.y"
{ yyval.nest = nest(); ;
    break;}
case 566:
#line 1166 "CxxParser.y"
{ yyval.line = YACC_LINE(); start_search(false); ;
    break;}
case 567:
#line 1167 "CxxParser.y"
{ yyval.line = YACC_LINE(); start_search(true); ;
    break;}
case 568:
#line 1168 "CxxParser.y"
{ yyval.utility = YACC_UTILITY_MODE(); ;
    break;}
}

#line 705 "c:/program files/bison/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1170 "CxxParser.y"

#include <CxxParsing.cxx>
/*EndTester*/
