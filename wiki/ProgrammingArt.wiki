#summary Programs are art.

= Introduction =

On the home page, I stated that programs are art.


= Details =

Many people have made the connection between programming and art.  I believe the connection to be a literal one, not a metaphor.

In [http://mitpress.mit.edu/sicp/ Structure and Interpretation of Computer Programs], Exercise 1.3 asks the user to

  Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

The point of the exercise is to introduce students to case analysis via the `cond` operation.  The desired solution is something like this:

{{{
(define (sum-square-largest x y z)
  (cond ((and (> y x) (> z x)) ;; y and z are largest
         (+ (* y y) (* z z)))
        ((and (> x y) (> z y)) ;; x and z are largest
         (+ (* x x) (* z z)))
        ((and (> x z) (> y z)) ;; x and y are largest
         (+ (* x x) (* y y)))))
}}}
Of course there are numerous variations on this answer, but the important point is that there is a three-way conditional that reflects the property that at most one of x, y, or z is the smallest number.  The symmetry in the problem is matched by a symmetry in the solution.

Consider this solution:
{{{
(define (sum-square-largest x y z)
  (cond ((and (< x y) (< x z)) ;; x is smallest
         (+ (* y y) (* z z)))
        (else (sum-square-largest y z x))))
}}}
When I first showed this solution to my colleagues the universal reaction was one of surprised laughter.  The solution doesn't seem to have enough "parts" to work, nonetheless it does.  I think the short solution is surprising because everyone knows the intent of the exercise is to teach multi-way branches, and the recursive call shows up unexpectedly.

...

