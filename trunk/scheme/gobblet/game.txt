Here is a sample game.  The first 6 moves are made at random
because the game is somewhat dull otherwise.
    Half-turn:  0,  white to move.
    #(4 4 4)
      .  .  .  .
      .  .  .  .
      .  .  .  .
      .  .  .  .
    #(4 4 4)
    Evaluation:  0

    (0 (1 . 3) #<struct:position> #<struct:promise>)
    Half-turn:  1,  black to move.
    #(4 4 4)
      .  .  .  .
      .  .  . w3
      .  .  .  .
      .  .  .  .
    #(3 4 4)
    Evaluation:  1

    (0 (3 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  2,  white to move.
    #(3 4 4)
      .  .  .  .
      .  .  . w3
      .  .  .  .
     b3  .  .  .
    #(3 4 4)
    Evaluation:  -1

    (1 (2 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  3,  black to move.
    #(3 4 4)
      .  .  .  .
      .  .  . w3
     w3  .  .  .
     b3  .  .  .
    #(3 3 4)
    Evaluation:  0

    (1 (1 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  4,  white to move.
    #(3 3 4)
      .  .  .  .
     b3  .  . w3
     w3  .  .  .
     b3  .  .  .
    #(3 3 4)
    Evaluation:  -5

    (0 (0 . 3) #<struct:position> #<struct:promise>)
    Half-turn:  5,  black to move.
    #(3 3 4)
      .  .  . w2
     b3  .  . w3
     w3  .  .  .
     b3  .  .  .
    #(2 3 4)
    Evaluation:  1

-------------------------------
At this point, white is given a 2-ply lookahead
while black is given only 1-ply.

    (0 (3 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  6,  white to move.
    #(2 3 4)
      .  .  . w2
     b3  .  . w3
     w3  .  .  .
     b3 b2  .  .
    #(2 3 4)
    Evaluation:  -4

Black has a slight initial advantage:  it is `half way' to winning on
both the left column and the bottom row.  White makes a strategic move
to occupy the center.

    (2 (2 . 2) #<struct:position> #<struct:promise>)
    Half-turn:  7,  black to move.
    #(2 3 4)
      .  .  . w2
     b3  .  . w3
     w3  . w3  .
     b3 b2  .  .
    #(2 3 3)
    Evaluation:  3

Black responds by grabbing the corner.  (First gobble!)

    ((1 . 0) (0 . 3) #<struct:position> #<struct:promise>)
    Half-turn:  8,  white to move.
    #(2 3 4)
      .  .  . b3
      .  .  . w3
     w3  . w3  .
     b3 b2  .  .
    #(2 3 3)
    Evaluation:  -4

White forces black to play (2 . 3) by aligning his big pieces.

    ((1 . 3) (2 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  9,  black to move.
    #(2 3 4)
      .  .  . b3
      .  .  .  .
     w3 w3 w3  .
     b3 b2  .  .
    #(2 3 3)
    Evaluation:  18

Black blocks with a small piece.  Note that white cannot
cover the small piece and claim a win because black does
not threaten to win.

    (0 (2 . 3) #<struct:position> #<struct:promise>)
    Half-turn:  10,  white to move.
    #(1 3 4)
      .  .  . b3
      .  .  .  .
     w3 w3 w3 b1
     b3 b2  .  .
    #(2 3 3)
    Evaluation:  13

White instead opts to try a column.

    (1 (1 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  11,  black to move.
    #(1 3 4)
      .  .  . b3
     w2  .  .  .
     w3 w3 w3 b1
     b3 b2  .  .
    #(2 2 3)
    Evaluation:  18

Black isn't thrilled with this, and gobbles another white
piece.

    ((3 . 0) (1 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  12,  white to move.
    #(1 3 4)
      .  .  . b3
     b3  .  .  .
     w3 w3 w3 b1
      . b2  .  .
    #(2 2 3)
    Evaluation:  22

White continues work on the column by grabbing the corner.

    (2 (0 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  13,  black to move.
    #(1 3 4)
     w2  .  . b3
     b3  .  .  .
     w3 w3 w3 b1
      . b2  .  .
    #(2 2 2)
    Evaluation:  32

Black decides that his little blocking piece is vulnerable
so he gobbles his own piece with a big one.

    (2 (2 . 3) #<struct:position> #<struct:promise>)
    Half-turn:  14,  white to move.
    #(1 3 3)
     w2  .  . b3
     b3  .  .  .
     w3 w3 w3 b3
      . b2  .  .
    #(2 2 2)
    Evaluation:  32

White's strategy is to grab another middle square to increase
the potential number of line-ups.

    (0 (1 . 2) #<struct:position> #<struct:promise>)
    Half-turn:  15,  black to move.
    #(1 3 3)
     w2  .  . b3
     b3  . w1  .
     w3 w3 w3 b3
      . b2  .  .
    #(1 2 2)
    Evaluation:  43

Black changes his mind, ungobbles his own piece and instead
gobbles the corner.

    ((2 . 3) (0 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  16,  white to move.
    #(1 3 3)
     b3  .  . b3
     b3  . w1  .
     w3 w3 w3 b1
      . b2  .  .
    #(1 2 2)
    Evaluation:  23

White gobbles the little black piece and threatens a win.
Black must block.

    ((2 . 2) (2 . 3) #<struct:position> #<struct:promise>)
    Half-turn:  17,  black to move.
    #(1 3 3)
     b3  .  . b3
     b3  . w1  .
     w3 w3  . w3
      . b2  .  .
    #(1 2 2)
    Evaluation:  22

Black blocks with a b2.  White could gobble, but it wouldn't
help because his w3's are in the same row.

    (1 (2 . 2) #<struct:position> #<struct:promise>)
    Half-turn:  18,  white to move.
    #(1 2 3)
     b3  .  . b3
     b3  . w1  .
     w3 w3 b2 w3
      . b2  .  .
    #(1 2 2)
    Evaluation:  15

Nonetheless, white does gobble.  Black will have to block
again.

    ((2 . 1) (2 . 2) #<struct:position> #<struct:promise>)
    Half-turn:  19,  black to move.
    #(1 2 3)
     b3  .  . b3
     b3  . w1  .
     w3  . w3 w3
      . b2  .  .
    #(1 2 2)
    Evaluation:  22

Black blocks with a b1.  Again, white cannot gobble with
a w2 because black is not threatening to win.

    (1 (2 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  20,  white to move.
    #(1 1 3)
     b3  .  . b3
     b3  . w1  .
     w3 b1 w3 w3
      . b2  .  .
    #(1 2 2)
    Evaluation:  11

Again, white gobbles the new black one.  Again, black must
block.  White seems to want black to run out of pieces.

    ((2 . 0) (2 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  21,  black to move.
    #(1 1 3)
     b3  .  . b3
     b3  . w1  .
      . w3 w3 w3
      . b2  .  .
    #(1 2 2)
    Evaluation:  28

Black blocks *and* gets 3 in a row.

    (2 (2 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  22,  white to move.
    #(1 1 2)
     b3  .  . b3
     b3  . w1  .
     b2 w3 w3 w3
      . b2  .  .
    #(1 2 2)
    Evaluation:  7

White gobbles the new black one, but releases the old.

    ((2 . 3) (2 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  23,  black to move.
    #(1 1 2)
     b3  .  . b3
     b3  . w1  .
     w3 w3 w3 b1
      . b2  .  .
    #(1 2 2)
    Evaluation:  23

Black grabs a center square, gobbling white.  White's
moves are rather limited because his pieces are either
gobbled or pinned down.

    ((3 . 1) (1 . 2) #<struct:position> #<struct:promise>)
    Half-turn:  24,  white to move.
    #(1 1 2)
     b3  .  . b3
     b3  . b2  .
     w3 w3 w3 b1
      .  .  .  .
    #(1 2 2)
    Evaluation:  2

White opts to put more pieces into play.  He grabs the
other center square.

    (1 (1 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  25,  black to move.
    #(1 1 2)
     b3  .  . b3
     b3 w1 b2  .
     w3 w3 w3 b1
      .  .  .  .
    #(1 1 2)
    Evaluation:  13

Black grabs the corner!  White has some definite problems
now because two of the three w3 pieces are pinned.

    (2 (3 . 0) #<struct:position> #<struct:promise>)
    Half-turn:  26,  white to move.
    #(1 1 1)
     b3  .  . b3
     b3 w1 b2  .
     w3 w3 w3 b1
     b1  .  .  .
    #(1 1 2)
    Evaluation:  -29

But white decides to build off the pinned piece.  Remember that
the upper left and upper right corners have white pieces hiding
under the black.  The B3's aren't quite pinned...

    (2 (3 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  27,  black to move.
    #(1 1 1)
     b3  .  . b3
     b3 w1 b2  .
     w3 w3 w3 b1
     b1 w1  .  .
    #(1 1 1)
    Evaluation:  -8

But now with white threatening with 3 in a row, black has to
block.  The problem is that he has few blocking options.  He
opts to grab white with a b2, but this means he exposes a
white piece.

    ((1 . 2) (1 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  28,  white to move.
    #(1 1 1)
     b3  .  . b3
     b3 b2 w1  .
     w3 w3 w3 b1
     b1 w1  .  .
    #(1 1 1)
    Evaluation:  -8

It doesn't matter because white can now force a win.

    ((1 . 2) (0 . 1) #<struct:position> #<struct:promise>)
    Half-turn:  29,  black to move.
    #(1 1 1)
     b3 w1  . b3
     b3 b2  .  .
     w3 w3 w3 b1
     b1 w1  .  .
    #(1 1 1)
    Evaluation:  2

Black's move is essentially random as it discovers it must lose.

    ((2 . 3) (3 . 2) #<struct:position> #<struct:promise>)
    Half-turn:  30,  white to move.
    #(1 1 1)
     b3 w1  . b3
     b3 b2  .  .
     w3 w3 w3  .
     b1 w1 b1  .
    #(1 1 1)
    Evaluation:  2

White wins:

    ((0 . 1) (2 . 3) #<struct:position> #<struct:promise>)
    Half-turn:  31,  black to move.
    #(1 1 1)
     b3  .  . b3
     b3 b2  .  .
     w3 w3 w3 w1
     b1 w1 b1  .
    #(1 1 1)
    Evaluation:  32000#f
