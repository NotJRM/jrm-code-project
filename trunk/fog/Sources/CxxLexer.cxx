/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
// #include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
static yyconst short int yy_acclist[1131] =
    {   0,
      114,  112,  113,  111,  112,  113,  110,  113,  112,  113,
        8,  112,  113,  112,  113,  112,  113,    5,  112,  113,
      112,  113,  112,  113,  112,  113,  112,  113,  112,  113,
      106,  112,  113,  112,  113,  112,  113,  112,  113,  112,
      113,  107,  112,  113,  107,  112,  113,  112,  113,  112,
      113,  107,  112,  113,  107,  112,  113,  107,  112,  113,
      107,  112,  113,  107,  112,  113,  107,  112,  113,  107,
      112,  113,  107,  112,  113,  107,  112,  113,  107,  112,
      113,  107,  112,  113,  107,  112,  113,  107,  112,  113,
      107,  112,  113,  107,  112,  113,  107,  112,  113,  107,

      112,  113,  107,  112,  113,  107,  112,  113,  107,  112,
      113,  112,  113,  112,  113,  111,  112,  113,    1,  110,
      113,  112,  113,    8,  112,  113,    2,  112,  113,  112,
      113,  112,  113,    5,  112,  113,  112,  113,  112,  113,
      112,  113,  112,  113,  112,  113,  106,  112,  113,  112,
      113,  112,  113,  112,  113,  112,  113,  107,  112,  113,
      107,  112,  113,  112,  113,  112,  113,  107,  112,  113,
      107,  112,  113,  107,  112,  113,  107,  112,  113,  107,
      112,  113,  107,  112,  113,  107,  112,  113,  107,  112,
      113,  107,  112,  113,  107,  112,  113,  107,  112,  113,

      107,  112,  113,  107,  112,  113,  107,  112,  113,  107,
      112,  113,  107,  112,  113,  107,  112,  113,  107,  112,
      113,  107,  112,  113,  107,  112,  113,  112,  113,  111,
       86,    8,    6,    7,  100,   89,  102,    5,    3,    4,
       98,   91,   96,   92,   97,   94,   95,  106,   99,  106,
      106,   81,   83,   87,   85,   88,   84,  107,    8,    5,
      108,  108,  101,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,   31,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   44,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      103,   90,    1,  111,    2,   86,    8,    6,    7,    2,
      100,   89,  102,    5,    3,    4,   98,   91,   96,   92,
       97,   94,   95,  106,   99,  106,  106,   81,   83,   87,
       85,   88,   84,  107,    8,    5,  108,  108,  101,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
       31,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   44,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  103,   90,   93,   82,

      105,  104,  108,  108,  107,  107,  107,  107,  107,  107,
      107,  107,   18,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   41,  107,  107,  107,  107,   46,  107,  107,
      107,  107,   50,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,   69,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   93,   82,  105,  104,  108,  108,  107,  107,
      107,  107,  107,  107,  107,  107,   18,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,   41,  107,  107,  107,
      107,   46,  107,  107,  107,  107,   50,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   69,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  108,  107,  107,  107,
      107,  107,  107,  107,  107,   19,  107,   20,  107,  107,
       22,  107,  107,   24,  107,  107,  107,  107,  107,  107,
      107,  107,   34,  107,   35,  107,  107,  107,  107,  107,
      107,  107,   43,  107,  107,   47,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,

      107,  107,  107,   66,  107,  107,   68,  107,  107,  107,
      107,  107,  107,   77,  107,  107,  107,  107,  108,  107,
      107,  107,  107,  107,  107,  107,  107,   19,  107,   20,
      107,  107,   22,  107,  107,   24,  107,  107,  107,  107,
      107,  107,  107,  107,   34,  107,   35,  107,  107,  107,
      107,  107,  107,  107,   43,  107,  107,   47,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   66,  107,  107,   68,  107,
      107,  107,  107,  107,  107,   77,  107,  107,  107,  107,
        9,  107,  107,  107,  107,  107,  107,  107,   17,  107,

      107,   21,  107,   23,  107,   25,  107,   26,  107,  107,
      107,  107,  107,  107,  107,  107,  107,   39,  107,   40,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   58,  107,  107,  107,  107,  107,  107,  107,
       67,  107,  107,  107,  107,   73,  107,  107,   75,  107,
      107,  107,  107,   80,  107,    9,  107,  107,  107,  107,
      107,  107,  107,   17,  107,  107,   21,  107,   23,  107,
       25,  107,   26,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   39,  107,   40,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,   58,  107,  107,

      107,  107,  107,  107,  107,   67,  107,  107,  107,  107,
       73,  107,  107,   75,  107,  107,  107,  107,   80,  107,
      107,  109,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,   30,  107,   32,  107,  107,  107,   37,  107,
       38,  107,   42,  107,   45,  107,  107,  107,  107,  107,
      107,   54,  107,  107,  107,   57,  107,   59,  107,   60,
      107,   61,  107,   63,  107,   64,  107,  107,  107,   71,
      107,  107,  107,  107,  107,  107,  107,  109,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,   30,  107,
       32,  107,  107,  107,   37,  107,   38,  107,   42,  107,

       45,  107,  107,  107,  107,  107,  107,   54,  107,  107,
      107,   57,  107,   59,  107,   60,  107,   61,  107,   63,
      107,   64,  107,  107,  107,   71,  107,  107,  107,  107,
      107,  107,   10,  107,  107,  107,  107,   15,  107,  107,
       13,  107,  107,  107,   29,  107,  107,  107,   48,  107,
      107,  107,   52,  107,  107,  107,  107,  107,  107,   70,
      107,  107,  107,   76,  107,  107,   79,  107,   10,  107,
      107,  107,  107,   15,  107,  107,   13,  107,  107,  107,
       29,  107,  107,  107,   48,  107,  107,  107,   52,  107,
      107,  107,  107,  107,  107,   70,  107,  107,  107,   76,

      107,  107,   79,  107,  107,  107,   14,  107,  107,  107,
       28,  107,  107,   36,  107,  107,   51,  107,  107,   55,
      107,  107,  107,   65,  107,   72,  107,   74,  107,   78,
      107,  107,  107,   14,  107,  107,  107,   28,  107,  107,
       36,  107,  107,   51,  107,  107,   55,  107,  107,  107,
       65,  107,   72,  107,   74,  107,   78,  107,  107,  107,
       16,  107,  107,  107,   49,  107,   53,  107,  107,  107,
      107,  107,   16,  107,  107,  107,   49,  107,   53,  107,
      107,  107,   11,  107,  107,   27,  107,  107,  107,  107,
       11,  107,  107,   27,  107,  107,  107,  107,  107,  107,

      107,   62,  107,  107,  107,  107,   62,  107,  107,   33,
      107,  107,  107,   33,  107,  107,   12,  107,  107,   12,
      107,  107,  107,  107,  107,  107,   56,  107,   56,  107
    } ;

static yyconst short int yy_accept[929] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   16,
       18,   21,   23,   25,   27,   29,   31,   34,   36,   38,
       40,   42,   45,   48,   50,   52,   55,   58,   61,   64,
       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  109,  112,  114,  116,  119,  122,
      124,  127,  130,  132,  134,  137,  139,  141,  143,  145,
      147,  150,  152,  154,  156,  158,  161,  164,  166,  168,
      171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  210,  213,  216,  219,  222,  225,  228,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,

      240,  241,  242,  243,  244,  245,  246,  247,  248,  248,
      249,  250,  251,  252,  252,  253,  254,  255,  256,  257,
      258,  259,  259,  260,  261,  262,  263,  263,  263,  263,
      264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
      274,  275,  277,  278,  279,  280,  281,  282,  283,  284,
      285,  286,  288,  289,  290,  291,  292,  293,  294,  295,
      296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
      306,  307,  308,  309,  310,  311,  312,  313,  313,  314,
      315,  316,  317,  318,  319,  320,  321,  322,  323,  324,
      325,  326,  327,  328,  329,  330,  331,  332,  333,  334,

      334,  335,  336,  337,  338,  338,  339,  340,  341,  342,
      343,  344,  345,  345,  346,  347,  348,  349,  349,  349,
      349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
      359,  360,  361,  363,  364,  365,  366,  367,  368,  369,
      370,  371,  372,  374,  375,  376,  377,  378,  379,  380,
      381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
      391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
      401,  401,  401,  402,  403,  403,  403,  404,  404,  404,
      405,  406,  407,  408,  409,  410,  411,  412,  413,  415,
      416,  417,  418,  419,  420,  421,  422,  423,  424,  425,

      426,  427,  428,  429,  430,  431,  432,  433,  435,  436,
      437,  438,  440,  441,  442,  443,  445,  446,  447,  448,
      449,  450,  451,  452,  453,  454,  455,  456,  457,  458,
      459,  460,  461,  462,  464,  465,  466,  467,  468,  469,
      470,  471,  472,  473,  474,  475,  475,  475,  476,  477,
      477,  477,  478,  478,  478,  479,  480,  481,  482,  483,
      484,  485,  486,  487,  489,  490,  491,  492,  493,  494,
      495,  496,  497,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507,  509,  510,  511,  512,  514,  515,  516,
      517,  519,  520,  521,  522,  523,  524,  525,  526,  527,

      528,  529,  530,  531,  532,  533,  534,  535,  536,  538,
      539,  540,  541,  542,  543,  544,  545,  546,  547,  547,
      547,  547,  547,  548,  548,  548,  549,  550,  551,  552,
      553,  554,  555,  556,  558,  560,  561,  563,  564,  566,
      567,  568,  569,  570,  571,  572,  573,  575,  577,  578,
      579,  580,  581,  582,  583,  585,  586,  588,  589,  590,
      591,  592,  593,  594,  595,  596,  597,  598,  599,  600,
      601,  602,  603,  604,  606,  607,  609,  610,  611,  612,
      613,  614,  616,  617,  618,  619,  619,  619,  619,  619,
      620,  620,  620,  621,  622,  623,  624,  625,  626,  627,

      628,  630,  632,  633,  635,  636,  638,  639,  640,  641,
      642,  643,  644,  645,  647,  649,  650,  651,  652,  653,
      654,  655,  657,  658,  660,  661,  662,  663,  664,  665,
      666,  667,  668,  669,  670,  671,  672,  673,  674,  675,
      676,  678,  679,  681,  682,  683,  684,  685,  686,  688,
      689,  690,  691,  691,  691,  691,  691,  691,  691,  693,
      694,  695,  696,  697,  698,  699,  701,  702,  704,  706,
      708,  710,  711,  712,  713,  714,  715,  716,  717,  718,
      720,  722,  723,  724,  725,  726,  727,  728,  729,  730,
      731,  732,  733,  735,  736,  737,  738,  739,  740,  741,

      743,  744,  745,  746,  748,  749,  751,  752,  753,  754,
      756,  756,  756,  756,  756,  756,  756,  758,  759,  760,
      761,  762,  763,  764,  766,  767,  769,  771,  773,  775,
      776,  777,  778,  779,  780,  781,  782,  783,  785,  787,
      788,  789,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  800,  801,  802,  803,  804,  805,  806,  808,  809,
      810,  811,  813,  814,  816,  817,  818,  819,  821,  821,
      821,  821,  821,  821,  823,  824,  825,  826,  827,  828,
      829,  830,  831,  832,  833,  835,  837,  838,  839,  841,
      843,  845,  847,  848,  849,  850,  851,  852,  854,  855,

      856,  858,  860,  862,  864,  866,  868,  869,  870,  872,
      873,  874,  875,  876,  877,  877,  877,  877,  877,  877,
      879,  880,  881,  882,  883,  884,  885,  886,  887,  888,
      889,  891,  893,  894,  895,  897,  899,  901,  903,  904,
      905,  906,  907,  908,  910,  911,  912,  914,  916,  918,
      920,  922,  924,  925,  926,  928,  929,  930,  931,  932,
      933,  933,  933,  933,  935,  936,  937,  938,  940,  941,
      943,  944,  945,  947,  948,  949,  951,  952,  953,  955,
      956,  957,  958,  959,  960,  962,  963,  964,  966,  967,
      969,  969,  969,  969,  971,  972,  973,  974,  976,  977,

      979,  980,  981,  983,  984,  985,  987,  988,  989,  991,
      992,  993,  994,  995,  996,  998,  999, 1000, 1002, 1003,
     1005, 1005, 1005, 1005, 1006, 1007, 1009, 1010, 1011, 1013,
     1014, 1016, 1017, 1019, 1020, 1022, 1023, 1024, 1026, 1028,
     1030, 1032, 1032, 1032, 1032, 1033, 1034, 1036, 1037, 1038,
     1040, 1041, 1043, 1044, 1046, 1047, 1049, 1050, 1051, 1053,
     1055, 1057, 1059, 1059, 1059, 1059, 1060, 1061, 1063, 1064,
     1065, 1067, 1069, 1070, 1071, 1071, 1071, 1071, 1072, 1073,
     1075, 1076, 1077, 1079, 1081, 1082, 1083, 1083, 1083, 1085,
     1086, 1088, 1089, 1090, 1091, 1091, 1091, 1093, 1094, 1096,

     1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107,
     1109, 1110, 1112, 1113, 1114, 1116, 1117, 1119, 1120, 1122,
     1123, 1124, 1125, 1126, 1127, 1129, 1131, 1131
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   15,   15,
       15,   16,   15,   17,   15,   18,   18,   19,    1,   20,
       21,   22,   23,    1,   24,   24,   24,   24,   25,   24,
       26,   26,   26,   26,   26,   27,   26,   26,   26,   26,
       26,   26,   26,   26,   28,   26,   26,   26,   26,   26,
        1,   29,    1,   30,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   26,   41,   42,   43,   44,
       45,   46,   26,   47,   48,   49,   50,   51,   52,   53,
       54,   55,    1,   56,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    4,    4,    4,    4,    1,    1,
        1,    1,    1,    4,    4,    5,    5,    5,    5,    1,
        5,    4,    4,    4,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static yyconst short int yy_base[970] =
    {   0,
        0,   56, 1949, 1950, 1946, 1950, 1926,  108, 1925,  106,
      106, 1924,  105,  107,  107, 1923,  105, 1924,  111, 1921,
      117, 1912,  131,  156, 1919,  113,  104,  117,  138,  114,
      134,  166,  129,  153,  146,  116,  119,  140,  152,  120,
      175,  181,  189,  194,  187,  136, 1936,  238, 1950,  191,
      226, 1935,  198,  222,  229,  233,  239,  244,  254,  242,
      272,  243,  326,  327,  328,  350,  243,  404,  405,  228,
      201,  287,  383,  393,  291,  398, 1892,  299, 1891, 1885,
      305, 1888,   71, 1897,  410,  422,  294,  300,  377,  414,
     1930, 1950,  405, 1950,    0, 1950, 1950, 1950,  415, 1950,

        0, 1950, 1950, 1950, 1950, 1950, 1921, 1950, 1917,  427,
     1950,  435,  454,  418, 1950, 1908, 1950, 1950, 1950, 1907,
     1898,  439,  413,  463, 1950,  458,    0,    0,    0, 1950,
      459,  451,  455,  448,  394,  449,  452,  473,  474,  475,
      479,  480,  481,  383,  483,  485,  484,  491,  488,  489,
      493, 1897,  495,  494,  498,  503,  499,  512,  510,  453,
      514,  511,  520,  530,  524,  528,  532,  516,  536,  538,
      540,  544,  545,  554,  552, 1950, 1950, 1922, 1950,  592,
     1921, 1920,  585, 1919, 1918, 1917, 1916, 1915, 1914,  593,
     1913, 1912, 1911, 1910, 1909, 1908, 1907,  594, 1906,  586,

        0, 1905,    0,  589,  581, 1904,  600, 1903, 1902, 1901,
      602,    0,  604,  605,  608, 1900,  603,  652,  675,  698,
     1899,  593, 1857, 1857, 1850, 1853, 1861,  564, 1864, 1863,
     1850,  587, 1843, 1848, 1843, 1840,  589, 1847, 1843, 1840,
     1846, 1836,    0,  594, 1840, 1834, 1839, 1829, 1844,  599,
     1846,  602, 1833,  608,  615, 1837, 1833,  609,  598, 1829,
      213, 1834, 1826,  617, 1833, 1831, 1867, 1866, 1950, 1950,
        0,    0, 1950, 1950,    0,    0,  649,    0,    0,    0,
      624,  644,  642,  531,  631,  632,  665,  654, 1839,  629,
      675,  666,  689,  668,  672,  676,  691,  674,  692,  708,

      697,  707,  709,  713,  715,  698,  716, 1838,  718,  720,
      586, 1837,  721,  724,  728, 1836,  731,  732,  733,  734,
      737,  740,  738,  739,  741,  743,  742,  744,  746,  751,
      745,  758,  760, 1835,  763,  761,  769,  771,  752,  773,
      775,  781,  776, 1860, 1859,  804,  827, 1858, 1857,  850,
      873,  808,  896,  919,    0, 1811, 1823, 1821, 1811, 1811,
     1805, 1836, 1810,    0, 1806, 1808, 1817, 1812, 1813, 1799,
     1797,  768, 1812, 1807, 1809, 1809, 1804, 1796,  785, 1802,
     1789, 1804,    0, 1799, 1789, 1793,    0, 1794, 1799, 1794,
        0, 1782, 1777, 1778, 1784, 1785, 1780, 1773, 1775, 1777,

     1784, 1770, 1768, 1768, 1770, 1767, 1769, 1777,    0, 1776,
     1766, 1770, 1765, 1759, 1772, 1774, 1773, 1762,    0,    0,
        0,    0, 1950,    0,    0,  783,  817,  820,  785,  806,
      821,  818,  829, 1774, 1773,  851, 1772,  842, 1771,  828,
      844,  875,  849,  867,  896,  874, 1770, 1769,  910,  848,
      871,  843,  873,  897, 1768,  898, 1767,  890,  911,  916,
      917,  865,  918,  928,  931,  932,  933,  934,  936,  935,
      937,  938,  944, 1766,  939, 1765,  948,  940,  949,  956,
      945, 1764,  960,  961,  964,  995, 1018, 1041, 1064, 1789,
     1087, 1110, 1748, 1754, 1755, 1741,  954, 1752, 1770, 1745,

        0,    0, 1743,    0, 1744,    0, 1734, 1732, 1740, 1729,
     1729, 1735, 1733,    0,    0, 1735, 1727, 1726, 1736, 1722,
     1726,    0, 1725,    0, 1735, 1719, 1734, 1733, 1728, 1723,
     1714, 1712, 1713, 1710, 1722, 1712, 1716, 1721, 1720, 1711,
        0, 1700,    0,  962, 1707, 1712, 1711, 1698,    0, 1698,
     1699, 1709,    0,    0,    0,    0,    0,    0, 1715,  970,
      972,  987,  978,  988, 1010, 1714,  993, 1713, 1712, 1711,
      802,  994, 1018, 1012, 1032,  986, 1011, 1020, 1041, 1710,
     1709, 1055, 1035, 1064, 1017, 1038, 1043, 1057, 1079, 1065,
     1080, 1066, 1708, 1101, 1078, 1103, 1089, 1100, 1119, 1707,

     1104, 1120, 1121, 1706, 1112, 1705, 1125, 1123, 1129, 1704,
     1149, 1172, 1195, 1218, 1241, 1264,    0, 1698, 1689, 1696,
     1689, 1711, 1693,    0, 1682,    0,    0,    0, 1694, 1680,
     1681, 1686, 1685, 1680, 1685, 1669, 1673,    0,    0, 1681,
     1679, 1672, 1667, 1663, 1662, 1676, 1675, 1659, 1671, 1662,
        0, 1670, 1667, 1669, 1653, 1662, 1668,    0, 1663, 1663,
     1665,    0, 1652,    0, 1663, 1654, 1662,    0,    0,    0,
        0,    0,    0, 1663, 1130, 1132, 1133, 1147, 1163, 1139,
     1141, 1164, 1033, 1146, 1662, 1661, 1165, 1174, 1660, 1659,
     1658, 1657, 1186, 1189, 1171, 1188, 1196, 1656, 1208, 1194,

     1655, 1654, 1653, 1209, 1652, 1651, 1197, 1210, 1650, 1088,
     1231, 1219, 1220, 1234, 1287, 1310, 1333, 1356, 1379,    0,
     1636, 1629, 1640, 1631, 1658, 1641, 1636, 1637, 1620, 1620,
        0,    0, 1634, 1627,    0,    0,    0,    0, 1630, 1633,
     1619, 1627, 1613,    0, 1625, 1613,    0,    0,    0, 1628,
        0,    0, 1609, 1620,    0, 1613, 1619, 1612, 1611, 1603,
        0,    0,    0, 1622, 1239, 1255, 1235, 1621, 1264, 1620,
     1240, 1258, 1619, 1261, 1280, 1618, 1257, 1284, 1617, 1278,
     1286, 1307, 1303, 1281, 1616, 1323, 1325, 1615, 1326, 1614,
     1402, 1425, 1448,    0, 1596, 1601, 1604,    0, 1597,    0,

     1606, 1601,    0, 1605, 1558,    0, 1568, 1547,    0, 1557,
     1545, 1545, 1556, 1553,    0, 1550, 1550,    0, 1548,    0,
        0,    0,    0, 1327, 1332, 1554, 1335, 1350, 1553, 1349,
     1542, 1346, 1541, 1370, 1540, 1355, 1309, 1539, 1538, 1537,
     1534, 1471, 1494, 1517, 1526, 1517,    0, 1518, 1511,    0,
     1514,    0, 1511,    0, 1511,    0, 1498, 1512,    0,    0,
        0,    0,    0,    0,    0, 1372, 1358, 1514, 1379, 1378,
     1511, 1510, 1393, 1396, 1540, 1563,    0, 1504, 1495,    0,
     1487, 1493,    0,    0, 1488, 1475,    0,    0, 1493, 1392,
     1492, 1404, 1402, 1418,    0,    0,    0, 1480,    0, 1469,

     1467, 1466, 1380, 1419, 1287, 1485, 1469, 1453, 1470,    0,
     1394, 1471, 1440, 1463,    0, 1464, 1468, 1424,    0, 1462,
     1442, 1445, 1426, 1443, 1462,    0, 1950, 1600, 1605, 1608,
     1610, 1615, 1620, 1625, 1630, 1475, 1474, 1473, 1472, 1466,
     1450, 1442, 1441, 1382, 1381, 1336, 1335, 1326, 1304, 1266,
     1198, 1197, 1174, 1021, 1020,  994,  920,  866,  676,  646,
      612,  564,  511,  483,  410,  335,  218,  192,  143
    } ;

static yyconst short int yy_def[970] =
    {   0,
      927,  927,  927,  927,  927,  927,  927,  928,  927,  927,
      929,  927,  927,  927,  927,  927,  930,  927,  927,  927,
      927,  931,  931,  927,  927,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  927,  932,  932,  927,  932,
      933,  934,  932,  932,  935,  932,  932,  932,  932,  932,
      927,  932,  932,  932,  932,  927,   66,  932,  932,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,  932,
      927,  927,  928,  927,  928,  927,  927,  927,  929,  927,

      929,  927,  927,  927,  927,  927,  927,  927,  927,  930,
      927,  930,  930,  927,  927,  927,  927,  927,  927,  927,
      931,  927,  928,  929,  927,  927,  936,  937,  938,  927,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  927,  927,  932,  927,  932,
      934,  932,  933,  932,  933,  934,  932,  932,  932,  935,
      932,  935,  932,  932,  932,  932,  932,  932,  932,  932,

       61,  932,   61,   61,  932,  932,  932,  932,  932,  932,
      932,   66,  932,  933,  935,  932,  932,  932,  218,  218,
      932,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,  932,  932,  927,  927,
      939,  940,  927,  927,  941,  942,  927,  943,  944,  938,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  932,  932,  218,  218,  932,  932,  218,
      218,  932,  218,  218,  220,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,  945,  946,
      947,  948,  927,  949,  950,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  220,  220,  220,  220,  932,
      220,  220,   66,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,  951,  952,  953,  954,  955,  956,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      220,  220,  220,  220,  220,  220,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,  957,  958,
      959,  960,  961,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  220,  220,  220,  220,  220,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
      962,  963,  964,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      220,  220,  220,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
      965,  966,  967,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  220,  220,  220,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,  968,  969,  956,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  220,  220,  616,   66,   66,   66,
       66,   66,   66,   66,   66,   66,  958,  960,  931,  931,
      931,  931,  931,  931,  716,  718,   66,   66,   66,   66,

       66,   66,  931,  931,  931,  931,   66,   66,   66,   66,
      931,  931,  931,   66,   66,   66,  931,  931,   66,   66,
      931,   66,  931,   66,  931,   66,    0,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927
    } ;

static yyconst short int yy_nxt[2007] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   17,   17,   17,   18,   19,
       20,   21,    4,   22,   22,   22,   23,   22,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   22,   34,
       22,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   22,   22,   22,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   61,   61,   61,   62,   63,   64,   65,   47,   66,
       66,   66,   67,   66,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   66,   78,   66,   79,   80,   81,

       82,   83,   84,   85,   86,   87,   88,   89,   66,   66,
       66,   90,   94,   97,  100,  103,  108,  250,  105,  109,
      251,  110,  110,  110,  110,  104,   98,  106,  107,  113,
      116,  117,  122,  114,  101,  123,   95,  119,  120,  124,
      113,  122,  122,  131,  122,  122,  888,  122,  122,  141,
      156,  133,  132,  134,  157,  161,  176,  122,  142,  122,
      125,  135,  122,  136,  125,  155,  122,  143,  122,  137,
      126,  126,  126,  151,  122,  144,  138,  145,  125,  139,
      122,  122,  140,  127,  125,  158,  146,  125,  125,  152,
      154,  177,  125,  179,  122,  887,  153,  147,  159,  125,

      179,  160,  125,  122,  125,  128,  125,  148,  129,  122,
      149,  182,  150,  162,  163,  122,  166,  122,  187,  167,
      174,  865,  122,  164,  179,  175,  165,  168,  179,  188,
      184,  179,  170,  172,  169,  179,  171,  191,  173,  180,
      179,  179,  189,  181,  179,  179,  179,  214,  224,  194,
      225,  215,  411,  193,  185,  196,  179,  192,  222,  195,
      412,  206,  202,  199,  197,  198,  200,  223,  201,  201,
      201,  201,  178,  178,  179,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  203,  178,  203,  203,  203,  203,
      178,  178,  178,  178,  178,  203,  204,  203,  203,  203,

      205,  178,  203,  203,  203,  203,  203,  204,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  178,  179,  179,
      179,  226,  235,  227,  236,  243,  247,  261,  864,  263,
      248,  262,  244,  237,  264,  207,  208,  209,  210,  211,
      178,  178,  179,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  212,  212,  212,  212,  178,  178,
      178,  178,  178,  212,  212,  212,  212,  212,  213,  178,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  178,  179,  179,  216,   94,
      265,  122,  216,  863,  228,  266,  179,   94,  217,  217,
      217,  229,  122,  100,  230,  221,  216,  231,  232,  238,
      302,  218,  216,   95,  267,  216,  216,  233,  291,  239,
      216,   95,  240,  101,  241,  271,  234,  216,  253,  254,
      216,  113,  216,  219,  216,  114,  220,  257,  255,  113,
      258,  256,  113,  114,  112,  112,  275,  272,  259,  268,
      113,  100,  277,  277,  277,  260,  122,  122,  113,  122,
      122,  122,  114,  122,  292,  320,  823,  122,  276,  113,
      281,  101,  282,  283,  288,  284,  290,  289,  285,  293,

      294,  122,  122,  122,  295,  296,  286,  122,  122,  122,
      287,  122,  122,  122,  822,  298,  122,  122,  297,  122,
      299,  122,  122,  122,  301,  306,  122,  122,  309,  300,
      304,  122,  303,  305,  308,  307,  311,  313,  122,  122,
      122,  310,  122,  312,  122,  315,  314,  317,  122,  318,
      316,  321,  122,  322,  319,  324,  122,  325,  122,  122,
      122,  327,  323,  329,  122,  333,  122,  821,  122,  334,
      330,  331,  122,  122,  326,  429,  328,  336,  332,  338,
      122,  335,  122,  179,  340,  337,  341,  179,  179,  184,
      339,  343,  342,  180,  179,  179,  179,  181,  345,  203,

      203,  191,  179,  344,  179,  179,  179,  179,  346,  184,
      179,  368,  369,  185,  122,  763,  191,  352,  352,  352,
      348,  192,  349,  373,  356,  456,  357,  358,  374,  359,
      347,  350,  360,  185,  379,  386,  192,  380,  393,  396,
      361,  397,  387,  394,  362,  400,  402,  408,  406,  121,
      398,  409,  122,  351,  179,  407,  415,  122,  416,  122,
      122,  403,  401,  423,  423,  423,  353,  353,  353,  353,
      122,  426,  122,  434,  430,  353,  353,  428,  427,  762,
      431,  432,  122,  353,  353,  353,  353,  353,  353,  354,
      354,  354,  354,  122,  122,  433,  122,  436,  354,  354,

      122,  438,  122,  122,  122,  443,  354,  354,  354,  354,
      354,  354,  355,  355,  355,  355,  435,  122,  439,  122,
      122,  355,  355,  440,  437,  122,  122,  444,  446,  355,
      355,  355,  355,  355,  355,  122,  122,  122,  441,  442,
      445,  122,  447,  122,  122,  452,  122,  453,  122,  122,
      451,  448,  122,  454,  449,  458,  122,  450,  457,  122,
      122,  122,  122,  459,  455,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  463,  464,  460,  469,  122,
      122,  462,  461,  465,  468,  467,  122,  466,  122,  122,
      470,  122,  474,  471,  472,  476,  473,  122,  477,  122,

      481,  122,  475,  122,  122,  478,  483,  482,  479,  122,
      179,  122,  484,  122,  480,  508,  509,  485,  486,  486,
      486,  486,  490,  490,  490,  559,  516,  486,  486,  517,
      122,  562,  682,  566,  122,  486,  486,  486,  486,  486,
      486,  487,  487,  487,  487,  122,  122,  563,  122,  122,
      487,  487,  560,  561,  564,  565,  122,  122,  487,  487,
      487,  487,  487,  487,  488,  488,  488,  488,  567,  112,
      122,  122,  122,  488,  488,  570,  122,  122,  580,  122,
      569,  488,  488,  488,  488,  488,  488,  489,  489,  489,
      489,  568,  571,  122,  578,  122,  489,  489,  573,  122,

      588,  122,  122,  122,  489,  489,  489,  489,  489,  489,
      491,  491,  491,  491,  572,  574,  576,  579,  122,  491,
      491,  581,  584,  761,  122,  122,  122,  491,  491,  491,
      491,  491,  491,  492,  492,  492,  492,  575,  122,  122,
      582,  583,  492,  492,  122,  122,  122,  586,  587,  577,
      492,  492,  492,  492,  492,  492,  122,  589,  585,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  594,
      597,  598,  122,  122,  596,  590,  122,  122,  592,  591,
      595,  593,  601,  604,  122,  599,  605,  602,  122,  122,
      600,  603,  122,  606,  607,  621,  659,  674,  122,  610,

      122,  660,  622,  675,  679,  661,  122,  609,  608,  611,
      611,  611,  611,  676,  122,  122,  122,  678,  611,  611,
      677,  122,  122,  673,  672,  687,  611,  611,  611,  611,
      611,  611,  612,  612,  612,  612,  681,  683,  122,  122,
      122,  612,  612,  680,  688,  122,  122,  685,  122,  612,
      612,  612,  612,  612,  612,  613,  613,  613,  613,  684,
      122,  122,  694,  122,  613,  613,  122,  686,  689,  122,
      692,  122,  613,  613,  613,  613,  613,  613,  614,  614,
      614,  614,  772,  122,  690,  122,  695,  614,  614,  691,
      697,  696,  122,  122,  122,  614,  614,  614,  614,  614,

      614,  615,  615,  615,  615,  693,  122,  122,  122,  701,
      615,  615,  698,  699,  703,  700,  122,  122,  615,  615,
      615,  615,  615,  615,  616,  616,  616,  616,  122,  122,
      786,  122,  122,  616,  616,  702,  704,  705,  706,  708,
      122,  616,  616,  616,  616,  616,  616,  122,  122,  122,
      707,  122,  710,  122,  709,  711,  712,  122,  122,  714,
      122,  122,  713,  715,  715,  715,  715,  122,  766,  122,
      769,  764,  715,  715,  122,  122,  770,  671,  768,  765,
      715,  715,  715,  715,  715,  715,  716,  716,  716,  716,
      767,  122,  122,  122,  773,  716,  716,  771,  774,  122,

      670,  669,  122,  716,  716,  716,  716,  716,  716,  717,
      717,  717,  717,  775,  122,  778,  122,  122,  717,  717,
      777,  776,  122,  779,  122,  122,  717,  717,  717,  717,
      717,  717,  718,  718,  718,  718,  122,  122,  122,  783,
      782,  718,  718,  781,  780,  784,  785,  122,  122,  718,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  122,
      788,  789,  122,  122,  719,  719,  787,  122,  122,  558,
      826,  828,  719,  719,  719,  719,  719,  719,  720,  720,
      720,  720,  790,  122,  824,  122,  122,  720,  720,  122,
      832,  830,  122,  829,  825,  720,  720,  720,  720,  720,

      720,  791,  791,  791,  791,  827,  122,  557,  122,  122,
      791,  791,  122,  834,  122,  122,  838,  913,  791,  791,
      791,  791,  791,  791,  203,  203,  203,  203,  831,  556,
      833,  122,  835,  203,  203,  122,  837,  122,  555,  554,
      874,  203,  203,  203,  203,  203,  203,  792,  792,  792,
      792,  122,  836,  122,  122,  122,  792,  792,  839,  840,
      122,  841,  866,  122,  792,  792,  792,  792,  792,  792,
      212,  212,  212,  212,  122,  867,  868,  122,  122,  212,
      212,  871,  870,  122,  553,  425,  122,  212,  212,  212,
      212,  212,  212,  793,  793,  793,  793,  869,  122,  890,

      122,  873,  793,  793,  872,  889,  122,  122,  122,  892,
      793,  793,  793,  793,  793,  793,  842,  842,  842,  842,
      122,  122,  122,  911,  122,  842,  842,  891,  893,  917,
      122,  903,  122,  842,  842,  842,  842,  842,  842,  843,
      843,  843,  843,  894,  424,  422,  122,  122,  843,  843,
      905,  904,  122,  421,  122,  921,  843,  843,  843,  843,
      843,  843,  844,  844,  844,  844,  906,  912,  122,  420,
      122,  844,  844,  918,  925,  419,  280,  279,  278,  844,
      844,  844,  844,  844,  844,  875,  875,  875,  875,  923,
      122,  926,  924,  922,  875,  875,  122,  920,  919,  122,

      916,  915,  875,  875,  875,  875,  875,  875,  876,  876,
      876,  876,  914,  122,  910,  909,  908,  876,  876,  907,
      122,  122,  902,  901,  900,  876,  876,  876,  876,  876,
      876,  877,  877,  877,  877,  899,  898,  897,  122,  122,
      877,  877,  122,  886,  885,  884,  883,  882,  877,  877,
      877,  877,  877,  877,  895,  895,  895,  895,  881,  880,
      879,  878,  122,  895,  895,  122,  122,  122,  122,  122,
      122,  895,  895,  895,  895,  895,  895,  896,  896,  896,
      896,  122,  122,  862,  861,  860,  896,  896,  859,  858,
      857,  856,  855,  854,  896,  896,  896,  896,  896,  896,

       93,  853,   93,   93,   93,   99,  852,   99,   99,   99,
      112,  112,  112,  121,  121,  178,  178,  178,  178,  178,
      183,  183,  183,  183,  183,  186,  186,  186,  186,  186,
      190,  190,  190,  190,  190,  851,  850,  849,  848,  847,
      846,  845,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  820,  819,  818,  817,  816,  815,  814,  813,  812,
      811,  810,  809,  808,  807,  806,  805,  804,  803,  802,
      801,  800,  799,  798,  797,  796,  795,  794,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  760,  759,  758,  757,  756,  755,  754,  753,

      752,  751,  750,  749,  748,  747,  746,  745,  744,  743,
      742,  741,  740,  739,  738,  737,  736,  735,  734,  733,
      732,  731,  730,  729,  728,  727,  726,  725,  724,  723,
      722,  721,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  668,  667,  666,  665,  664,  663,
      662,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  620,  619,  618,
      617,  179,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  515,  514,
      513,  512,  511,  510,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  179,
      179,  179,  179,  122,  122,  122,  122,  122,  179,  179,
      418,  417,  414,  413,  410,  405,  404,  399,  395,  392,
      391,  390,  389,  388,  385,  384,  383,  382,  381,  378,
      377,  376,  375,  372,  371,  370,  367,  366,  365,  364,

      363,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  122,  122,  274,  273,  270,
      269,   91,  252,  249,  246,  245,  242,  179,  179,  130,
      122,  118,  115,  111,  102,   96,   92,   91,  927,    3,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,

      927,  927,  927,  927,  927,  927
    } ;

static yyconst short int yy_chk[2007] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    8,   10,   11,   13,   15,   83,   14,   15,
       83,   15,   15,   15,   15,   13,   10,   14,   14,   17,
       19,   19,   27,   17,   11,   23,    8,   21,   21,   23,
       17,   26,   30,   26,   36,   28,  969,   37,   40,   30,
       37,   27,   26,   27,   37,   40,   46,   33,   30,   23,
       24,   28,   31,   28,   24,   36,   29,   30,   38,   29,
       24,   24,   24,   33,   35,   31,   29,   31,   24,   29,
       39,   34,   29,   24,   24,   38,   31,   24,   24,   34,
       35,   46,   24,   50,   32,  968,   34,   32,   39,   24,

       53,   39,   24,   41,   24,   24,   24,   32,   24,   42,
       32,   50,   32,   41,   41,   45,   42,   43,   53,   42,
       45,  967,   44,   41,   54,   45,   41,   42,   51,   54,
       51,   55,   43,   44,   42,   56,   43,   55,   44,   48,
       48,   57,   54,   48,   60,   62,   58,   67,   71,   57,
       71,   67,  261,   56,   51,   58,   59,   55,   70,   57,
      261,   62,   60,   59,   58,   58,   59,   70,   59,   59,
       59,   59,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   63,   64,
       65,   72,   75,   72,   75,   78,   81,   87,  966,   88,
       81,   87,   78,   75,   88,   63,   63,   64,   65,   65,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   68,   69,   68,   93,
       89,  144,   68,  965,   73,   89,   90,  123,   68,   68,
       68,   73,  135,   99,   73,   69,   68,   73,   74,   76,
      144,   68,   68,   93,   90,   68,   68,   74,  135,   76,
       68,  123,   76,   99,   76,  114,   74,   68,   85,   85,
       68,  110,   68,   68,   68,  110,   68,   86,   85,  112,
       86,   85,  110,  112,  113,  113,  122,  114,   86,   90,
      112,  124,  126,  126,  126,   86,  134,  136,  113,  132,
      137,  160,  113,  133,  136,  160,  964,  131,  122,  113,
      131,  124,  131,  131,  132,  131,  134,  133,  131,  137,

      137,  138,  139,  140,  138,  139,  131,  141,  142,  143,
      131,  145,  147,  146,  963,  141,  149,  150,  140,  148,
      141,  151,  154,  153,  143,  147,  155,  157,  150,  142,
      146,  156,  145,  146,  149,  148,  153,  154,  159,  162,
      158,  151,  161,  153,  168,  156,  155,  158,  163,  159,
      157,  161,  165,  161,  159,  162,  166,  163,  164,  284,
      167,  164,  161,  165,  169,  168,  170,  962,  171,  168,
      166,  167,  172,  173,  163,  284,  164,  170,  167,  171,
      175,  169,  174,  205,  173,  170,  173,  183,  200,  183,
      172,  175,  174,  180,  180,  190,  198,  180,  200,  204,

      204,  190,  207,  198,  211,  217,  213,  214,  205,  214,
      215,  228,  228,  183,  311,  961,  215,  217,  217,  217,
      207,  190,  211,  232,  222,  311,  222,  222,  232,  222,
      205,  213,  222,  214,  237,  244,  215,  237,  250,  252,
      222,  252,  244,  250,  222,  254,  255,  259,  258,  960,
      252,  259,  281,  213,  218,  258,  264,  290,  264,  285,
      286,  255,  254,  277,  277,  277,  218,  218,  218,  218,
      283,  281,  282,  290,  285,  218,  218,  283,  282,  959,
      286,  287,  288,  218,  218,  218,  218,  218,  218,  219,
      219,  219,  219,  287,  292,  288,  294,  292,  219,  219,

      295,  294,  298,  291,  296,  298,  219,  219,  219,  219,
      219,  219,  220,  220,  220,  220,  291,  293,  295,  297,
      299,  220,  220,  296,  293,  301,  306,  299,  301,  220,
      220,  220,  220,  220,  220,  302,  300,  303,  297,  297,
      300,  304,  302,  305,  307,  306,  309,  307,  310,  313,
      305,  303,  314,  309,  304,  314,  315,  304,  313,  317,
      318,  319,  320,  315,  310,  321,  323,  324,  322,  325,
      327,  326,  328,  331,  329,  320,  321,  317,  326,  330,
      339,  319,  318,  322,  325,  324,  332,  323,  333,  336,
      327,  335,  331,  328,  329,  333,  330,  337,  335,  338,

      339,  340,  332,  341,  343,  336,  341,  340,  337,  342,
      352,  426,  342,  429,  338,  372,  372,  343,  346,  346,
      346,  346,  352,  352,  352,  426,  379,  346,  346,  379,
      571,  429,  571,  432,  430,  346,  346,  346,  346,  346,
      346,  347,  347,  347,  347,  427,  432,  430,  428,  431,
      347,  347,  427,  428,  430,  431,  440,  433,  347,  347,
      347,  347,  347,  347,  350,  350,  350,  350,  433,  958,
      438,  452,  441,  350,  350,  440,  450,  443,  452,  436,
      438,  350,  350,  350,  350,  350,  350,  351,  351,  351,
      351,  436,  441,  462,  450,  444,  351,  351,  443,  451,

      462,  453,  446,  442,  351,  351,  351,  351,  351,  351,
      353,  353,  353,  353,  442,  444,  446,  451,  458,  353,
      353,  453,  458,  957,  445,  454,  456,  353,  353,  353,
      353,  353,  353,  354,  354,  354,  354,  445,  449,  459,
      454,  456,  354,  354,  460,  461,  463,  460,  461,  449,
      354,  354,  354,  354,  354,  354,  464,  463,  459,  465,
      466,  467,  468,  470,  469,  471,  472,  475,  478,  468,
      471,  472,  473,  481,  470,  464,  477,  479,  466,  465,
      469,  467,  477,  478,  480,  473,  479,  477,  483,  484,
      475,  477,  485,  480,  481,  497,  544,  956,  560,  485,

      561,  544,  497,  560,  564,  544,  563,  484,  483,  486,
      486,  486,  486,  561,  576,  562,  564,  563,  486,  486,
      562,  567,  572,  955,  954,  576,  486,  486,  486,  486,
      486,  486,  487,  487,  487,  487,  567,  572,  565,  577,
      574,  487,  487,  565,  577,  585,  573,  574,  578,  487,
      487,  487,  487,  487,  487,  488,  488,  488,  488,  573,
      575,  683,  585,  583,  488,  488,  586,  575,  578,  579,
      583,  587,  488,  488,  488,  488,  488,  488,  489,  489,
      489,  489,  683,  582,  579,  588,  586,  489,  489,  582,
      588,  587,  584,  590,  592,  489,  489,  489,  489,  489,

      489,  491,  491,  491,  491,  584,  595,  589,  591,  592,
      491,  491,  589,  590,  595,  591,  710,  597,  491,  491,
      491,  491,  491,  491,  492,  492,  492,  492,  598,  594,
      710,  596,  601,  492,  492,  594,  596,  597,  598,  601,
      605,  492,  492,  492,  492,  492,  492,  599,  602,  603,
      599,  608,  603,  607,  602,  605,  607,  609,  675,  609,
      676,  677,  608,  611,  611,  611,  611,  680,  677,  681,
      680,  675,  611,  611,  684,  678,  681,  953,  679,  676,
      611,  611,  611,  611,  611,  611,  612,  612,  612,  612,
      678,  679,  682,  687,  684,  612,  612,  682,  687,  695,

      952,  951,  688,  612,  612,  612,  612,  612,  612,  613,
      613,  613,  613,  688,  693,  695,  696,  694,  613,  613,
      694,  693,  700,  696,  697,  707,  613,  613,  613,  613,
      613,  613,  614,  614,  614,  614,  699,  704,  708,  704,
      700,  614,  614,  699,  697,  707,  708,  712,  713,  614,
      614,  614,  614,  614,  614,  615,  615,  615,  615,  711,
      712,  713,  714,  767,  615,  615,  711,  765,  771,  950,
      767,  771,  615,  615,  615,  615,  615,  615,  616,  616,
      616,  616,  714,  766,  765,  777,  772,  616,  616,  774,
      777,  774,  769,  772,  766,  616,  616,  616,  616,  616,

      616,  715,  715,  715,  715,  769,  780,  949,  775,  784,
      715,  715,  778,  780,  781,  905,  784,  905,  715,  715,
      715,  715,  715,  715,  716,  716,  716,  716,  775,  948,
      778,  783,  781,  716,  716,  782,  783,  837,  947,  946,
      837,  716,  716,  716,  716,  716,  716,  717,  717,  717,
      717,  786,  782,  787,  789,  824,  717,  717,  786,  787,
      825,  789,  824,  827,  717,  717,  717,  717,  717,  717,
      718,  718,  718,  718,  832,  825,  827,  830,  828,  718,
      718,  832,  830,  836,  945,  944,  867,  718,  718,  718,
      718,  718,  718,  719,  719,  719,  719,  828,  834,  867,

      866,  836,  719,  719,  834,  866,  870,  869,  903,  870,
      719,  719,  719,  719,  719,  719,  791,  791,  791,  791,
      890,  873,  911,  903,  874,  791,  791,  869,  873,  911,
      893,  890,  892,  791,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  874,  943,  942,  894,  904,  792,  792,
      893,  892,  918,  941,  923,  918,  792,  792,  792,  792,
      792,  792,  793,  793,  793,  793,  894,  904,  913,  940,
      921,  793,  793,  913,  923,  939,  938,  937,  936,  793,
      793,  793,  793,  793,  793,  842,  842,  842,  842,  921,
      925,  924,  922,  920,  842,  842,  917,  916,  914,  912,

      909,  908,  842,  842,  842,  842,  842,  842,  843,  843,
      843,  843,  907,  906,  902,  901,  900,  843,  843,  898,
      891,  889,  886,  885,  882,  843,  843,  843,  843,  843,
      843,  844,  844,  844,  844,  881,  879,  878,  872,  871,
      844,  844,  868,  858,  857,  855,  853,  851,  844,  844,
      844,  844,  844,  844,  875,  875,  875,  875,  849,  848,
      846,  845,  841,  875,  875,  840,  839,  838,  835,  833,
      831,  875,  875,  875,  875,  875,  875,  876,  876,  876,
      876,  829,  826,  819,  817,  816,  876,  876,  814,  813,
      812,  811,  810,  808,  876,  876,  876,  876,  876,  876,

      928,  807,  928,  928,  928,  929,  805,  929,  929,  929,
      930,  930,  930,  931,  931,  932,  932,  932,  932,  932,
      933,  933,  933,  933,  933,  934,  934,  934,  934,  934,
      935,  935,  935,  935,  935,  804,  802,  801,  799,  797,
      796,  795,  790,  788,  785,  779,  776,  773,  770,  768,
      764,  760,  759,  758,  757,  756,  754,  753,  750,  746,
      745,  743,  742,  741,  740,  739,  734,  733,  730,  729,
      728,  727,  726,  725,  724,  723,  722,  721,  709,  706,
      705,  703,  702,  701,  698,  692,  691,  690,  689,  686,
      685,  674,  667,  666,  665,  663,  661,  660,  659,  657,

      656,  655,  654,  653,  652,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  625,  623,  622,  621,  620,
      619,  618,  610,  606,  604,  600,  593,  581,  580,  570,
      569,  568,  566,  559,  552,  551,  550,  548,  547,  546,
      545,  542,  540,  539,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  523,  521,
      520,  519,  518,  517,  516,  513,  512,  511,  510,  509,
      508,  507,  505,  503,  500,  499,  498,  496,  495,  494,
      493,  490,  482,  476,  474,  457,  455,  448,  447,  439,

      437,  435,  434,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  390,
      389,  388,  386,  385,  384,  382,  381,  380,  378,  377,
      376,  375,  374,  373,  371,  370,  369,  368,  367,  366,
      365,  363,  362,  361,  360,  359,  358,  357,  356,  349,
      348,  345,  344,  334,  316,  312,  308,  289,  268,  267,
      266,  265,  263,  262,  260,  257,  256,  253,  251,  249,
      248,  247,  246,  245,  242,  241,  240,  239,  238,  236,
      235,  234,  233,  231,  230,  229,  227,  226,  225,  224,

      223,  221,  216,  210,  209,  208,  206,  202,  199,  197,
      196,  195,  194,  193,  192,  191,  189,  188,  187,  186,
      185,  184,  182,  181,  178,  152,  121,  120,  116,  109,
      107,   91,   84,   82,   80,   79,   77,   52,   47,   25,
       22,   20,   18,   16,   12,    9,    7,    5,    3,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,

      927,  927,  927,  927,  927,  927
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/*
 *	  Title:			Miniature lexer for C++ parser.
 *
 *	  File Name:		CxxLexer.l
 *
 *	  Author:			E.D.Willink
 *
 *	This is a complete lexer for C++, intended for use with CxxParser.y.
 *	All actions are done by macros, so that there is some chance that customisation
 *	can be performed within the bounds of the CxxLexing.hxx and CxxLexing.cxx
 *	include files.
 *END
 */
#include <CxxLexing.hxx>

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 928 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 927 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{ LEX_SAVE_LINE(yytext, yyleng); REJECT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ /* Throw away preprocessor lines - hopefully only #line and equivalent. */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 4:
YY_RULE_SETUP
{ ERRMSG("End of line assumed to terminate character with trailing escape.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 5:
YY_RULE_SETUP
{ ERRMSG("End of line assumed to terminate character.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng); };
	YY_BREAK
case 6:
YY_RULE_SETUP
{ LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 7:
YY_RULE_SETUP
{ ERRMSG("End of line assumed to terminate string with trailing escape.");
								  LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 8:
YY_RULE_SETUP
{ ERRMSG("End of line assumed to terminate string.");
								  LEX_STRING_TOKEN(yytext, yyleng); };
	YY_BREAK
case 9:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_ASM); }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_CDECL); }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_DECLSPEC); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_FORCEINLINE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_INLINE1); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_INLINE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_INT64); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_STDCALL); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ LEX_MS_STATIC_TOKEN(MS_W64); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASM); }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(AUTO); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(BOOL); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(BREAK); }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(CASE); }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(CATCH); }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(CHAR); }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(CLASS); }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(CONST); }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(CONST_CAST); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(CONTINUE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(DEFAULT); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(DELETE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(DO); }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(DOUBLE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(DYNAMIC_CAST); }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ELSE); }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ENUM); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(EXPLICIT); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(EXPORT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(EXTERN); }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(FALSE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(FLOAT); }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(FOR); }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(FRIEND); }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(GOTO); }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(IF); }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(INLINE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(INT); }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(LONG); }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(MUTABLE); }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(NAMESPACE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(NEW); }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(OPERATOR); }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(PRIVATE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(PROTECTED); }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(PUBLIC); }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(REGISTER); }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(REINTERPRET_CAST); }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(RETURN); }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(SHORT); }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(SIGNED); }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(SIZEOF); }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(STATIC); }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(STATIC_CAST); }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(STRUCT); }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(SWITCH); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(TEMPLATE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(THIS); }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(THROW); }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(TRUE); }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(TRY); }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(TYPEDEF); }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(TYPEID); }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(TYPENAME); }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(UNION); }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(UNSIGNED); }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(USING); }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(VIRTUAL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(VOID); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(VOLATILE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(WCHAR_T); }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(WHILE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ LEX_C_STATIC_TOKEN(SCOPE); }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ELLIPSIS); }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(SHL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(SHR); }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(EQ); }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(NE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(LE); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(GE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(LOG_AND); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(LOG_OR); }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(INC); }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(DEC); }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ARROW_STAR); }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ARROW); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(DOT_STAR); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_ADD); }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_SUB); }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_MUL); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_DIV); }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_MOD); }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_XOR); }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_AND); }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_OR); }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_SHR); }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ LEX_STATIC_TOKEN(ASS_SHL); }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ LEX_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ LEX_IDENTIFIER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 108:
case 109:
YY_RULE_SETUP
{ LEX_ESCAPED_TOKEN(yytext, yyleng); }
	YY_BREAK
case 110:
case 111:
YY_RULE_SETUP
{ /* Throw away whitespace */ }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ LEX_ASCII_TOKEN(yytext[0]); }
	YY_BREAK
case 113:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 928 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 928 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 927);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

#include <CxxLexing.cxx>
